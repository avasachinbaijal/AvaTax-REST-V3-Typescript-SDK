/* tslint:disable */
/* eslint-disable */
/**
 * foundation
 * Platform foundation consists of services on top of which the Avalara Compliance Cloud platform is built. These services are foundational and provide functionality such as common organization, tenant and user management for the rest of the compliance platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import {
    DeviceList,
    DeviceListFromJSON,
    DeviceListToJSON,
    EntitlementList,
    EntitlementListFromJSON,
    EntitlementListToJSON,
    GrantList,
    GrantListFromJSON,
    GrantListToJSON,
    GroupList,
    GroupListFromJSON,
    GroupListToJSON,
    Tenant,
    TenantFromJSON,
    TenantToJSON,
    TenantList,
    TenantListFromJSON,
    TenantListToJSON,
    UserList,
    UserListFromJSON,
    UserListToJSON,
    VersionError,
    VersionErrorFromJSON,
    VersionErrorToJSON,
} from '../../packages/IAMDS';

export interface AddDeviceToTenantRequest {
    tenantId: string;
    deviceId: string;
    avalaraVersion?: AddDeviceToTenantAvalaraVersionEnum;
    xCorrelationId?: string;
}

export interface AddGrantToTenantUserRequest {
    tenantId: string;
    userId: string;
    grantId: string;
    avalaraVersion?: AddGrantToTenantUserAvalaraVersionEnum;
    xCorrelationId?: string;
}

export interface AddUserToTenantRequest {
    tenantId: string;
    userId: string;
    avalaraVersion?: AddUserToTenantAvalaraVersionEnum;
    xCorrelationId?: string;
}

export interface CreateTenantRequest {
    avalaraVersion?: CreateTenantAvalaraVersionEnum;
    xCorrelationId?: string;
    tenant?: Tenant;
}

export interface DeleteTenantRequest {
    tenantId: string;
    avalaraVersion?: DeleteTenantAvalaraVersionEnum;
    xCorrelationId?: string;
    ifMatch?: string;
}

export interface GetTenantRequest {
    tenantId: string;
    avalaraVersion?: GetTenantAvalaraVersionEnum;
    xCorrelationId?: string;
    ifNoneMatch?: string;
}

export interface ListTenantDevicesRequest {
    tenantId: string;
    $filter?: string;
    $top?: string;
    $skip?: string;
    $orderBy?: string;
    count?: boolean;
    countOnly?: boolean;
    avalaraVersion?: ListTenantDevicesAvalaraVersionEnum;
    xCorrelationId?: string;
}

export interface ListTenantEntitlementsRequest {
    tenantId: string;
    $filter?: string;
    $top?: string;
    $skip?: string;
    $orderBy?: string;
    count?: boolean;
    countOnly?: boolean;
    avalaraVersion?: ListTenantEntitlementsAvalaraVersionEnum;
    xCorrelationId?: string;
}

export interface ListTenantGroupsRequest {
    tenantId: string;
    $filter?: string;
    $top?: string;
    $skip?: string;
    $orderBy?: string;
    count?: boolean;
    countOnly?: boolean;
    avalaraVersion?: ListTenantGroupsAvalaraVersionEnum;
    xCorrelationId?: string;
}

export interface ListTenantUserGrantsRequest {
    tenantId: string;
    userId: string;
    $filter?: string;
    $top?: string;
    $skip?: string;
    $orderBy?: string;
    count?: boolean;
    countOnly?: boolean;
    avalaraVersion?: ListTenantUserGrantsAvalaraVersionEnum;
    xCorrelationId?: string;
}

export interface ListTenantUserGroupsRequest {
    tenantId: string;
    userId: string;
    $filter?: string;
    $top?: string;
    $skip?: string;
    $orderBy?: string;
    count?: boolean;
    countOnly?: boolean;
    avalaraVersion?: ListTenantUserGroupsAvalaraVersionEnum;
    xCorrelationId?: string;
}

export interface ListTenantUsersRequest {
    tenantId: string;
    $filter?: string;
    $top?: string;
    $skip?: string;
    $orderBy?: string;
    count?: boolean;
    countOnly?: boolean;
    avalaraVersion?: ListTenantUsersAvalaraVersionEnum;
    xCorrelationId?: string;
}

export interface ListTenantsRequest {
    $filter?: string;
    $top?: string;
    $skip?: string;
    count?: boolean;
    countOnly?: boolean;
    $orderBy?: string;
    avalaraVersion?: ListTenantsAvalaraVersionEnum;
    xCorrelationId?: string;
}

export interface PatchTenantRequest {
    tenantId: string;
    avalaraVersion?: PatchTenantAvalaraVersionEnum;
    xCorrelationId?: string;
    ifMatch?: string;
    tenant?: Tenant;
}

export interface RemoveDeviceFromTenantRequest {
    tenantId: string;
    deviceId: string;
    avalaraVersion?: RemoveDeviceFromTenantAvalaraVersionEnum;
    xCorrelationId?: string;
}

export interface RemoveGrantFromTenantUserRequest {
    tenantId: string;
    userId: string;
    grantId: string;
    avalaraVersion?: RemoveGrantFromTenantUserAvalaraVersionEnum;
    xCorrelationId?: string;
}

export interface RemoveUserFromTenantRequest {
    tenantId: string;
    userId: string;
    avalaraVersion?: RemoveUserFromTenantAvalaraVersionEnum;
    xCorrelationId?: string;
}

export interface ReplaceTenantRequest {
    tenantId: string;
    avalaraVersion?: ReplaceTenantAvalaraVersionEnum;
    xCorrelationId?: string;
    ifMatch?: string;
    tenant?: Tenant;
}

/**
 * 
 */
export class TenantApi extends runtime.ApiClient {

    /**
     * Adds a device to a tenant.
     * Add a device to a tenant.
     */
    async addDeviceToTenantRaw(requestParameters: AddDeviceToTenantRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling addDeviceToTenant.');
        }

        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling addDeviceToTenant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["iam", "TestScope", "TestScope1"]);
        }

        const response = await this.request({
            path: `/tenants/{tenant-id}/devices/{device-id}`.replace(`{${"tenant-id"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"device-id"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds a device to a tenant.
     * Add a device to a tenant.
     */
    async addDeviceToTenant(requestParameters: AddDeviceToTenantRequest, initOverrides?: RequestInit): Promise<void> {
        await this.addDeviceToTenantRaw(requestParameters, initOverrides);
    }

    /**
     * Adds a grant to a user within a tenant.
     * Add a grant to a user within a tenant.
     */
    async addGrantToTenantUserRaw(requestParameters: AddGrantToTenantUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling addGrantToTenantUser.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addGrantToTenantUser.');
        }

        if (requestParameters.grantId === null || requestParameters.grantId === undefined) {
            throw new runtime.RequiredError('grantId','Required parameter requestParameters.grantId was null or undefined when calling addGrantToTenantUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["iam", "TestScope", "TestScope1"]);
        }

        const response = await this.request({
            path: `/tenants/{tenant-id}/users/{user-id}/grants/{grant-id}`.replace(`{${"tenant-id"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"grant-id"}}`, encodeURIComponent(String(requestParameters.grantId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds a grant to a user within a tenant.
     * Add a grant to a user within a tenant.
     */
    async addGrantToTenantUser(requestParameters: AddGrantToTenantUserRequest, initOverrides?: RequestInit): Promise<void> {
        await this.addGrantToTenantUserRaw(requestParameters, initOverrides);
    }

    /**
     * Adds a user to a tenant.
     * Add a user to a tenant.
     */
    async addUserToTenantRaw(requestParameters: AddUserToTenantRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling addUserToTenant.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addUserToTenant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["iam", "TestScope", "TestScope1"]);
        }

        const response = await this.request({
            path: `/tenants/{tenant-id}/users/{user-id}`.replace(`{${"tenant-id"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds a user to a tenant.
     * Add a user to a tenant.
     */
    async addUserToTenant(requestParameters: AddUserToTenantRequest, initOverrides?: RequestInit): Promise<void> {
        await this.addUserToTenantRaw(requestParameters, initOverrides);
    }

    /**
     * On a post, the tenant ID will not be known since it is assigned by the system. The response contains the tenant, including ID.
     * Add a tenant to the list of tenants.
     */
    async createTenantRaw(requestParameters: CreateTenantRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Tenant>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["iam", "TestScope", "TestScope1"]);
        }

        const response = await this.request({
            path: `/tenants`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TenantToJSON(requestParameters.tenant),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantFromJSON(jsonValue));
    }

    /**
     * On a post, the tenant ID will not be known since it is assigned by the system. The response contains the tenant, including ID.
     * Add a tenant to the list of tenants.
     */
    async createTenant(requestParameters: CreateTenantRequest = {}, initOverrides?: RequestInit): Promise<Tenant> {
        const response = await this.createTenantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the specified tenant.
     * Delete a tenant.
     */
    async deleteTenantRaw(requestParameters: DeleteTenantRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling deleteTenant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["iam", "TestScope", "TestScope1"]);
        }

        const response = await this.request({
            path: `/tenants/{tenant-id}`.replace(`{${"tenant-id"}}`, encodeURIComponent(String(requestParameters.tenantId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the specified tenant.
     * Delete a tenant.
     */
    async deleteTenant(requestParameters: DeleteTenantRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteTenantRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves the specified tenant.
     * GET a tenant by ID.
     */
    async getTenantRaw(requestParameters: GetTenantRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Tenant>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling getTenant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["iam", "TestScope", "TestScope1"]);
        }

        const response = await this.request({
            path: `/tenants/{tenant-id}`.replace(`{${"tenant-id"}}`, encodeURIComponent(String(requestParameters.tenantId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantFromJSON(jsonValue));
    }

    /**
     * Retrieves the specified tenant.
     * GET a tenant by ID.
     */
    async getTenant(requestParameters: GetTenantRequest, initOverrides?: RequestInit): Promise<Tenant> {
        const response = await this.getTenantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all devices within a tenant which the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:   * displayName * grants/identifier * active * groups/identifier
     * Retrieve all devices within a tenant.
     */
    async listTenantDevicesRaw(requestParameters: ListTenantDevicesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeviceList>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling listTenantDevices.');
        }

        const queryParameters: any = {};

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$orderBy !== undefined) {
            queryParameters['$orderBy'] = requestParameters.$orderBy;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.countOnly !== undefined) {
            queryParameters['countOnly'] = requestParameters.countOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["iam", "TestScope", "TestScope1"]);
        }

        const response = await this.request({
            path: `/tenants/{tenant-id}/devices`.replace(`{${"tenant-id"}}`, encodeURIComponent(String(requestParameters.tenantId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all devices within a tenant which the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:   * displayName * grants/identifier * active * groups/identifier
     * Retrieve all devices within a tenant.
     */
    async listTenantDevices(requestParameters: ListTenantDevicesRequest, initOverrides?: RequestInit): Promise<DeviceList> {
        const response = await this.listTenantDevicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all entitlements on the tenant. This list is paged, returning no more than 1000 items at a time.  Filterable properties:   * displayName * system/identifier * active * features/identifier * customGrants/identifier
     * Retrieve all entitlements within a tenant.
     */
    async listTenantEntitlementsRaw(requestParameters: ListTenantEntitlementsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EntitlementList>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling listTenantEntitlements.');
        }

        const queryParameters: any = {};

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$orderBy !== undefined) {
            queryParameters['$orderBy'] = requestParameters.$orderBy;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.countOnly !== undefined) {
            queryParameters['countOnly'] = requestParameters.countOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["iam", "TestScope", "TestScope1"]);
        }

        const response = await this.request({
            path: `/tenants/{tenant-id}/entitlements`.replace(`{${"tenant-id"}}`, encodeURIComponent(String(requestParameters.tenantId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntitlementListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all entitlements on the tenant. This list is paged, returning no more than 1000 items at a time.  Filterable properties:   * displayName * system/identifier * active * features/identifier * customGrants/identifier
     * Retrieve all entitlements within a tenant.
     */
    async listTenantEntitlements(requestParameters: ListTenantEntitlementsRequest, initOverrides?: RequestInit): Promise<EntitlementList> {
        const response = await this.listTenantEntitlementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all groups on the tenant. This list is paged, returning no more than 1000 items at a time.  Filterable properties:   * displayName * grants/identifier
     * Retrieve all groups within a tenant.
     */
    async listTenantGroupsRaw(requestParameters: ListTenantGroupsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GroupList>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling listTenantGroups.');
        }

        const queryParameters: any = {};

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$orderBy !== undefined) {
            queryParameters['$orderBy'] = requestParameters.$orderBy;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.countOnly !== undefined) {
            queryParameters['countOnly'] = requestParameters.countOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["iam", "TestScope", "TestScope1"]);
        }

        const response = await this.request({
            path: `/tenants/{tenant-id}/groups`.replace(`{${"tenant-id"}}`, encodeURIComponent(String(requestParameters.tenantId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all groups on the tenant. This list is paged, returning no more than 1000 items at a time.  Filterable properties:   * displayName * grants/identifier
     * Retrieve all groups within a tenant.
     */
    async listTenantGroups(requestParameters: ListTenantGroupsRequest, initOverrides?: RequestInit): Promise<GroupList> {
        const response = await this.listTenantGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all grants a user belongs to within the tenant which the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:   * displayName * grants/identifier
     * Add a grant to a user within a tenant.
     */
    async listTenantUserGrantsRaw(requestParameters: ListTenantUserGrantsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GrantList>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling listTenantUserGrants.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling listTenantUserGrants.');
        }

        const queryParameters: any = {};

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$orderBy !== undefined) {
            queryParameters['$orderBy'] = requestParameters.$orderBy;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.countOnly !== undefined) {
            queryParameters['countOnly'] = requestParameters.countOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["iam", "TestScope", "TestScope1"]);
        }

        const response = await this.request({
            path: `/tenants/{tenant-id}/users/{user-id}/grants`.replace(`{${"tenant-id"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GrantListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all grants a user belongs to within the tenant which the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:   * displayName * grants/identifier
     * Add a grant to a user within a tenant.
     */
    async listTenantUserGrants(requestParameters: ListTenantUserGrantsRequest, initOverrides?: RequestInit): Promise<GrantList> {
        const response = await this.listTenantUserGrantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all groups a user belongs to within the tenant which the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.
     * List the groups a user belongs to within a specific tenant.
     */
    async listTenantUserGroupsRaw(requestParameters: ListTenantUserGroupsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GroupList>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling listTenantUserGroups.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling listTenantUserGroups.');
        }

        const queryParameters: any = {};

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$orderBy !== undefined) {
            queryParameters['$orderBy'] = requestParameters.$orderBy;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.countOnly !== undefined) {
            queryParameters['countOnly'] = requestParameters.countOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["iam", "TestScope", "TestScope1"]);
        }

        const response = await this.request({
            path: `/tenants/{tenant-id}/users/{user-id}/groups`.replace(`{${"tenant-id"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all groups a user belongs to within the tenant which the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.
     * List the groups a user belongs to within a specific tenant.
     */
    async listTenantUserGroups(requestParameters: ListTenantUserGroupsRequest, initOverrides?: RequestInit): Promise<GroupList> {
        const response = await this.listTenantUserGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all users within the tenant which the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:   * displayName * emails/value * active * userName * grants/identifier * groups/identifier
     * Retrieve all users within a tenant.
     */
    async listTenantUsersRaw(requestParameters: ListTenantUsersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserList>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling listTenantUsers.');
        }

        const queryParameters: any = {};

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$orderBy !== undefined) {
            queryParameters['$orderBy'] = requestParameters.$orderBy;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.countOnly !== undefined) {
            queryParameters['countOnly'] = requestParameters.countOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["iam", "TestScope", "TestScope1"]);
        }

        const response = await this.request({
            path: `/tenants/{tenant-id}/users`.replace(`{${"tenant-id"}}`, encodeURIComponent(String(requestParameters.tenantId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all users within the tenant which the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:   * displayName * emails/value * active * userName * grants/identifier * groups/identifier
     * Retrieve all users within a tenant.
     */
    async listTenantUsers(requestParameters: ListTenantUsersRequest, initOverrides?: RequestInit): Promise<UserList> {
        const response = await this.listTenantUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all tenants the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:   * displayName * organization/identifier
     * Get a list of all tenants.
     */
    async listTenantsRaw(requestParameters: ListTenantsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TenantList>> {
        const queryParameters: any = {};

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.countOnly !== undefined) {
            queryParameters['countOnly'] = requestParameters.countOnly;
        }

        if (requestParameters.$orderBy !== undefined) {
            queryParameters['$orderBy'] = requestParameters.$orderBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["TestScope", "TestScope1"]);
        }

        const response = await this.request({
            path: `/tenants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all tenants the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:   * displayName * organization/identifier
     * Get a list of all tenants.
     */
    async listTenants(requestParameters: ListTenantsRequest = {}, initOverrides?: RequestInit): Promise<TenantList> {
        const response = await this.listTenantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the fields on a tenant which should change.
     * Update specific fields in a tenant.
     */
    async patchTenantRaw(requestParameters: PatchTenantRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling patchTenant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["iam", "TestScope", "TestScope1"]);
        }

        const response = await this.request({
            path: `/tenants/{tenant-id}`.replace(`{${"tenant-id"}}`, encodeURIComponent(String(requestParameters.tenantId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TenantToJSON(requestParameters.tenant),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the fields on a tenant which should change.
     * Update specific fields in a tenant.
     */
    async patchTenant(requestParameters: PatchTenantRequest, initOverrides?: RequestInit): Promise<void> {
        await this.patchTenantRaw(requestParameters, initOverrides);
    }

    /**
     * Removes a device from a tenant.
     * Remove a device from a tenant.
     */
    async removeDeviceFromTenantRaw(requestParameters: RemoveDeviceFromTenantRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling removeDeviceFromTenant.');
        }

        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling removeDeviceFromTenant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["iam", "TestScope", "TestScope1"]);
        }

        const response = await this.request({
            path: `/tenants/{tenant-id}/devices/{device-id}`.replace(`{${"tenant-id"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"device-id"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a device from a tenant.
     * Remove a device from a tenant.
     */
    async removeDeviceFromTenant(requestParameters: RemoveDeviceFromTenantRequest, initOverrides?: RequestInit): Promise<void> {
        await this.removeDeviceFromTenantRaw(requestParameters, initOverrides);
    }

    /**
     * Removes a grant from a user on a tenant.
     * Remove a grant from a user within a tenant.
     */
    async removeGrantFromTenantUserRaw(requestParameters: RemoveGrantFromTenantUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling removeGrantFromTenantUser.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling removeGrantFromTenantUser.');
        }

        if (requestParameters.grantId === null || requestParameters.grantId === undefined) {
            throw new runtime.RequiredError('grantId','Required parameter requestParameters.grantId was null or undefined when calling removeGrantFromTenantUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["iam", "TestScope", "TestScope1"]);
        }

        const response = await this.request({
            path: `/tenants/{tenant-id}/users/{user-id}/grants/{grant-id}`.replace(`{${"tenant-id"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"grant-id"}}`, encodeURIComponent(String(requestParameters.grantId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a grant from a user on a tenant.
     * Remove a grant from a user within a tenant.
     */
    async removeGrantFromTenantUser(requestParameters: RemoveGrantFromTenantUserRequest, initOverrides?: RequestInit): Promise<void> {
        await this.removeGrantFromTenantUserRaw(requestParameters, initOverrides);
    }

    /**
     * Removes a user from a tenant.
     * Remove a user from a tenant.
     */
    async removeUserFromTenantRaw(requestParameters: RemoveUserFromTenantRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling removeUserFromTenant.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling removeUserFromTenant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["iam", "TestScope", "TestScope1"]);
        }

        const response = await this.request({
            path: `/tenants/{tenant-id}/users/{user-id}`.replace(`{${"tenant-id"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a user from a tenant.
     * Remove a user from a tenant.
     */
    async removeUserFromTenant(requestParameters: RemoveUserFromTenantRequest, initOverrides?: RequestInit): Promise<void> {
        await this.removeUserFromTenantRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the tenant with the data in the request body.
     * Update a tenant by ID.
     */
    async replaceTenantRaw(requestParameters: ReplaceTenantRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling replaceTenant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["iam", "TestScope", "TestScope1"]);
        }

        const response = await this.request({
            path: `/tenants/{tenant-id}`.replace(`{${"tenant-id"}}`, encodeURIComponent(String(requestParameters.tenantId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TenantToJSON(requestParameters.tenant),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the tenant with the data in the request body.
     * Update a tenant by ID.
     */
    async replaceTenant(requestParameters: ReplaceTenantRequest, initOverrides?: RequestInit): Promise<void> {
        await this.replaceTenantRaw(requestParameters, initOverrides);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum AddDeviceToTenantAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum AddGrantToTenantUserAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum AddUserToTenantAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateTenantAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum DeleteTenantAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum GetTenantAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum ListTenantDevicesAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum ListTenantEntitlementsAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum ListTenantGroupsAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum ListTenantUserGrantsAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum ListTenantUserGroupsAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum ListTenantUsersAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum ListTenantsAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchTenantAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum RemoveDeviceFromTenantAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum RemoveGrantFromTenantUserAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum RemoveUserFromTenantAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum ReplaceTenantAvalaraVersionEnum {
    _100 = '1.0.0'
}
