/* tslint:disable */
/* eslint-disable */
/**
 * foundation
 * Platform foundation consists of services on top of which the Avalara Compliance Cloud platform is built. These services are foundational and provide functionality such as common organization, tenant and user management for the rest of the compliance platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import { RequestInit } from 'node-fetch';
import {
    Entitlement,
    EntitlementFromJSON,
    EntitlementToJSON,
    EntitlementList,
    EntitlementListFromJSON,
    EntitlementListToJSON,
    VersionError,
    VersionErrorFromJSON,
    VersionErrorToJSON,
} from '../../packages/IAMDS';

export interface CreateEntitlementRequest {
    avalaraVersion?: CreateEntitlementAvalaraVersionEnum;
    xCorrelationId?: string;
    entitlement?: Entitlement;
}

export interface DeleteEntitlementRequest {
    entitlementId: string;
    avalaraVersion?: DeleteEntitlementAvalaraVersionEnum;
    xCorrelationId?: string;
    ifMatch?: string;
}

export interface GetEntitlementRequest {
    entitlementId: string;
    avalaraVersion?: GetEntitlementAvalaraVersionEnum;
    xCorrelationId?: string;
    ifNoneMatch?: string;
}

export interface ListEntitlementsRequest {
    $filter?: string;
    $top?: string;
    $skip?: string;
    $orderBy?: string;
    count?: boolean;
    countOnly?: boolean;
    avalaraVersion?: ListEntitlementsAvalaraVersionEnum;
    xCorrelationId?: string;
}

export interface PatchEntitlementRequest {
    entitlementId: string;
    avalaraVersion?: PatchEntitlementAvalaraVersionEnum;
    xCorrelationId?: string;
    ifMatch?: string;
    entitlement?: Entitlement;
}

export interface ReplaceEntitlementRequest {
    entitlementId: string;
    avalaraVersion?: ReplaceEntitlementAvalaraVersionEnum;
    xCorrelationId?: string;
    ifMatch?: string;
    entitlement?: Entitlement;
}

/**
 * 
 */
export class EntitlementApi extends runtime.ApiClient {

    /**
     * The response contains the same object as posted and fills in the newly assigned entitlement ID.
     * Create an entitlement.
     */
    async createEntitlementRaw(requestParameters: CreateEntitlementRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Entitlement>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (this.configuration && this.configuration.bearerToken) {
            // oauth required
            headerParameters["Authorization"] = `Bearer ${this.configuration.bearerToken}`;
        }

        const response = await this.request({
            path: `/entitlements`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntitlementToJSON(requestParameters.entitlement),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntitlementFromJSON(jsonValue));
    }

    /**
     * The response contains the same object as posted and fills in the newly assigned entitlement ID.
     * Create an entitlement.
     */
    async createEntitlement(requestParameters: CreateEntitlementRequest = {}, initOverrides?: RequestInit): Promise<Entitlement> {
        const response = await this.createEntitlementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the specified entitlement.
     * Delete an entitlement.
     */
    async deleteEntitlementRaw(requestParameters: DeleteEntitlementRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.entitlementId === null || requestParameters.entitlementId === undefined) {
            throw new runtime.RequiredError('entitlementId','Required parameter requestParameters.entitlementId was null or undefined when calling deleteEntitlement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (this.configuration && this.configuration.bearerToken) {
            // oauth required
            headerParameters["Authorization"] = `Bearer ${this.configuration.bearerToken}`;
        }

        const response = await this.request({
            path: `/entitlements/{entitlement-id}`.replace(`{${"entitlement-id"}}`, encodeURIComponent(String(requestParameters.entitlementId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the specified entitlement.
     * Delete an entitlement.
     */
    async deleteEntitlement(requestParameters: DeleteEntitlementRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteEntitlementRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves an entitlement based on its ID.
     * Get an entitlement.
     */
    async getEntitlementRaw(requestParameters: GetEntitlementRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Entitlement>> {
        if (requestParameters.entitlementId === null || requestParameters.entitlementId === undefined) {
            throw new runtime.RequiredError('entitlementId','Required parameter requestParameters.entitlementId was null or undefined when calling getEntitlement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.bearerToken) {
            // oauth required
            headerParameters["Authorization"] = `Bearer ${this.configuration.bearerToken}`;
        }

        const response = await this.request({
            path: `/entitlements/{entitlement-id}`.replace(`{${"entitlement-id"}}`, encodeURIComponent(String(requestParameters.entitlementId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntitlementFromJSON(jsonValue));
    }

    /**
     * Retrieves an entitlement based on its ID.
     * Get an entitlement.
     */
    async getEntitlement(requestParameters: GetEntitlementRequest, initOverrides?: RequestInit): Promise<Entitlement> {
        const response = await this.getEntitlementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all entitlements the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:  * displayName * system/identifier * tenant/identifier * active * features/identifier * customGrants/identifier
     * List all entitlements.
     */
    async listEntitlementsRaw(requestParameters: ListEntitlementsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EntitlementList>> {
        const queryParameters: any = {};

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$orderBy !== undefined) {
            queryParameters['$orderBy'] = requestParameters.$orderBy;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.countOnly !== undefined) {
            queryParameters['countOnly'] = requestParameters.countOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (this.configuration && this.configuration.bearerToken) {
            // oauth required
            headerParameters["Authorization"] = `Bearer ${this.configuration.bearerToken}`;
        }

        const response = await this.request({
            path: `/entitlements`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntitlementListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all entitlements the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:  * displayName * system/identifier * tenant/identifier * active * features/identifier * customGrants/identifier
     * List all entitlements.
     */
    async listEntitlements(requestParameters: ListEntitlementsRequest = {}, initOverrides?: RequestInit): Promise<EntitlementList> {
        const response = await this.listEntitlementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates only the fields in the body of the request.
     * Update selected fields in an entitlement.
     */
    async patchEntitlementRaw(requestParameters: PatchEntitlementRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.entitlementId === null || requestParameters.entitlementId === undefined) {
            throw new runtime.RequiredError('entitlementId','Required parameter requestParameters.entitlementId was null or undefined when calling patchEntitlement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (this.configuration && this.configuration.bearerToken) {
            // oauth required
            headerParameters["Authorization"] = `Bearer ${this.configuration.bearerToken}`;
        }

        const response = await this.request({
            path: `/entitlements/{entitlement-id}`.replace(`{${"entitlement-id"}}`, encodeURIComponent(String(requestParameters.entitlementId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EntitlementToJSON(requestParameters.entitlement),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates only the fields in the body of the request.
     * Update selected fields in an entitlement.
     */
    async patchEntitlement(requestParameters: PatchEntitlementRequest, initOverrides?: RequestInit): Promise<void> {
        await this.patchEntitlementRaw(requestParameters, initOverrides);
    }

    /**
     * Replaces the specified entitlement with the entitlement in the body.
     * Update all fields in an entitlement.
     */
    async replaceEntitlementRaw(requestParameters: ReplaceEntitlementRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.entitlementId === null || requestParameters.entitlementId === undefined) {
            throw new runtime.RequiredError('entitlementId','Required parameter requestParameters.entitlementId was null or undefined when calling replaceEntitlement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (this.configuration && this.configuration.bearerToken) {
            // oauth required
            headerParameters["Authorization"] = `Bearer ${this.configuration.bearerToken}`;
        }

        const response = await this.request({
            path: `/entitlements/{entitlement-id}`.replace(`{${"entitlement-id"}}`, encodeURIComponent(String(requestParameters.entitlementId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntitlementToJSON(requestParameters.entitlement),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Replaces the specified entitlement with the entitlement in the body.
     * Update all fields in an entitlement.
     */
    async replaceEntitlement(requestParameters: ReplaceEntitlementRequest, initOverrides?: RequestInit): Promise<void> {
        await this.replaceEntitlementRaw(requestParameters, initOverrides);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum CreateEntitlementAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum DeleteEntitlementAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum GetEntitlementAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum ListEntitlementsAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchEntitlementAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum ReplaceEntitlementAvalaraVersionEnum {
    _100 = '1.0.0'
}
