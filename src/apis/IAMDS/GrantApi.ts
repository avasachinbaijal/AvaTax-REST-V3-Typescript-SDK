/* tslint:disable */
/* eslint-disable */
/**
 * foundation
 * Platform foundation consists of services on top of which the Avalara Compliance Cloud platform is built. These services are foundational and provide functionality such as common organization, tenant and user management for the rest of the compliance platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import { RequestInit } from 'node-fetch';
import {
    Grant,
    GrantFromJSON,
    GrantToJSON,
    GrantList,
    GrantListFromJSON,
    GrantListToJSON,
    VersionError,
    VersionErrorFromJSON,
    VersionErrorToJSON,
} from '../../packages/IAMDS';

export interface CreateGrantRequest {
    avalaraVersion?: CreateGrantAvalaraVersionEnum;
    xCorrelationId?: string;
    grant?: Grant;
}

export interface DeleteGrantRequest {
    grantId: string;
    avalaraVersion?: DeleteGrantAvalaraVersionEnum;
    xCorrelationId?: string;
    ifMatch?: string;
}

export interface GetGrantRequest {
    grantId: string;
    avalaraVersion?: GetGrantAvalaraVersionEnum;
    xCorrelationId?: string;
    ifNoneMatch?: string;
}

export interface ListGrantsRequest {
    $filter?: string;
    $top?: string;
    $skip?: string;
    $orderBy?: string;
    count?: boolean;
    countOnly?: boolean;
    avalaraVersion?: ListGrantsAvalaraVersionEnum;
    xCorrelationId?: string;
}

export interface PatchGrantRequest {
    grantId: string;
    avalaraVersion?: PatchGrantAvalaraVersionEnum;
    xCorrelationId?: string;
    ifMatch?: string;
    grant?: Grant;
}

export interface ReplaceGrantRequest {
    grantId: string;
    avalaraVersion?: ReplaceGrantAvalaraVersionEnum;
    xCorrelationId?: string;
    ifMatch?: string;
    grant?: Grant;
}

/**
 * 
 */
export class GrantApi extends runtime.ApiClient {
    public sdkVersion: string = '2.4.41';

    constructor(apiClient: runtime.ApiClient) {
        super(apiClient.configuration);
    }

    /**
     * The response contains the same object as posted and fills in the newly assigned grant ID.
     * Create a grant.
     */
    async createGrantRaw(requestParameters: CreateGrantRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Grant>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (this.configuration && this.configuration.bearerToken) {
            // oauth required
            headerParameters["Authorization"] = `Bearer ${this.configuration.bearerToken}`;
        }

        const response = await this.request({
            path: `/grants`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GrantToJSON(requestParameters.grant),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GrantFromJSON(jsonValue));
    }

    /**
     * The response contains the same object as posted and fills in the newly assigned grant ID.
     * Create a grant.
     */
    async createGrant(requestParameters: CreateGrantRequest = {}, initOverrides?: RequestInit): Promise<Grant> {
        const response = await this.createGrantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the specified grant.
     * Delete a grant.
     */
    async deleteGrantRaw(requestParameters: DeleteGrantRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.grantId === null || requestParameters.grantId === undefined) {
            throw new runtime.RequiredError('grantId','Required parameter requestParameters.grantId was null or undefined when calling deleteGrant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (this.configuration && this.configuration.bearerToken) {
            // oauth required
            headerParameters["Authorization"] = `Bearer ${this.configuration.bearerToken}`;
        }

        const response = await this.request({
            path: `/grants/{grant-id}`.replace(`{${"grant-id"}}`, encodeURIComponent(String(requestParameters.grantId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the specified grant.
     * Delete a grant.
     */
    async deleteGrant(requestParameters: DeleteGrantRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteGrantRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a grant based on its ID.
     * Retrieve a grant.
     */
    async getGrantRaw(requestParameters: GetGrantRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Grant>> {
        if (requestParameters.grantId === null || requestParameters.grantId === undefined) {
            throw new runtime.RequiredError('grantId','Required parameter requestParameters.grantId was null or undefined when calling getGrant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.bearerToken) {
            // oauth required
            headerParameters["Authorization"] = `Bearer ${this.configuration.bearerToken}`;
        }

        const response = await this.request({
            path: `/grants/{grant-id}`.replace(`{${"grant-id"}}`, encodeURIComponent(String(requestParameters.grantId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GrantFromJSON(jsonValue));
    }

    /**
     * Retrieves a grant based on its ID.
     * Retrieve a grant.
     */
    async getGrant(requestParameters: GetGrantRequest, initOverrides?: RequestInit): Promise<Grant> {
        const response = await this.getGrantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all grants the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:  * displayName * system/identifier * type * role/identifier
     * Retrieve all grants the current user has access to.
     */
    async listGrantsRaw(requestParameters: ListGrantsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GrantList>> {
        const queryParameters: any = {};

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$orderBy !== undefined) {
            queryParameters['$orderBy'] = requestParameters.$orderBy;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.countOnly !== undefined) {
            queryParameters['countOnly'] = requestParameters.countOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (this.configuration && this.configuration.bearerToken) {
            // oauth required
            headerParameters["Authorization"] = `Bearer ${this.configuration.bearerToken}`;
        }

        const response = await this.request({
            path: `/grants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GrantListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all grants the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:  * displayName * system/identifier * type * role/identifier
     * Retrieve all grants the current user has access to.
     */
    async listGrants(requestParameters: ListGrantsRequest = {}, initOverrides?: RequestInit): Promise<GrantList> {
        const response = await this.listGrantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates only the fields passed in the body.
     * Update only the fields within the body on the grant.
     */
    async patchGrantRaw(requestParameters: PatchGrantRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.grantId === null || requestParameters.grantId === undefined) {
            throw new runtime.RequiredError('grantId','Required parameter requestParameters.grantId was null or undefined when calling patchGrant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (this.configuration && this.configuration.bearerToken) {
            // oauth required
            headerParameters["Authorization"] = `Bearer ${this.configuration.bearerToken}`;
        }

        const response = await this.request({
            path: `/grants/{grant-id}`.replace(`{${"grant-id"}}`, encodeURIComponent(String(requestParameters.grantId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GrantToJSON(requestParameters.grant),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates only the fields passed in the body.
     * Update only the fields within the body on the grant.
     */
    async patchGrant(requestParameters: PatchGrantRequest, initOverrides?: RequestInit): Promise<void> {
        await this.patchGrantRaw(requestParameters, initOverrides);
    }

    /**
     * Replaces the specified grant with the grant in the body.
     * Update all fields on a grant.
     */
    async replaceGrantRaw(requestParameters: ReplaceGrantRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.grantId === null || requestParameters.grantId === undefined) {
            throw new runtime.RequiredError('grantId','Required parameter requestParameters.grantId was null or undefined when calling replaceGrant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (this.configuration && this.configuration.bearerToken) {
            // oauth required
            headerParameters["Authorization"] = `Bearer ${this.configuration.bearerToken}`;
        }

        const response = await this.request({
            path: `/grants/{grant-id}`.replace(`{${"grant-id"}}`, encodeURIComponent(String(requestParameters.grantId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GrantToJSON(requestParameters.grant),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Replaces the specified grant with the grant in the body.
     * Update all fields on a grant.
     */
    async replaceGrant(requestParameters: ReplaceGrantRequest, initOverrides?: RequestInit): Promise<void> {
        await this.replaceGrantRaw(requestParameters, initOverrides);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum CreateGrantAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum DeleteGrantAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum GetGrantAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum ListGrantsAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchGrantAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum ReplaceGrantAvalaraVersionEnum {
    _100 = '1.0.0'
}
