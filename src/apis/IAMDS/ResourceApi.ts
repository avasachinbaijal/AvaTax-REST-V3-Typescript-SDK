/* tslint:disable */
/* eslint-disable */
/**
 * foundation
 * Platform foundation consists of services on top of which the Avalara Compliance Cloud platform is built. These services are foundational and provide functionality such as common organization, tenant and user management for the rest of the compliance platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import { RequestInit } from 'node-fetch';
import {
    PermissionList,
    PermissionListFromJSON,
    PermissionListToJSON,
    Resource,
    ResourceFromJSON,
    ResourceToJSON,
    ResourceList,
    ResourceListFromJSON,
    ResourceListToJSON,
    VersionError,
    VersionErrorFromJSON,
    VersionErrorToJSON,
} from '../../packages/IAMDS';

export interface CreateResourceRequest {
    avalaraVersion?: CreateResourceAvalaraVersionEnum;
    xCorrelationId?: string;
    resource?: Resource;
}

export interface DeleteResourceRequest {
    resourceId: string;
    avalaraVersion?: DeleteResourceAvalaraVersionEnum;
    xCorrelationId?: string;
}

export interface GetResourceRequest {
    resourceId: string;
    avalaraVersion?: GetResourceAvalaraVersionEnum;
    xCorrelationId?: string;
    ifNoneMatch?: string;
    ifMatch?: string;
}

export interface ListResourcePermissionsRequest {
    resourceId: string;
    $filter?: string;
    $top?: string;
    $skip?: string;
    $orderBy?: string;
    count?: boolean;
    countOnly?: boolean;
    avalaraVersion?: ListResourcePermissionsAvalaraVersionEnum;
    xCorrelationId?: string;
}

export interface ListResourcesRequest {
    $filter?: string;
    $top?: string;
    $skip?: string;
    $orderBy?: string;
    count?: boolean;
    countOnly?: boolean;
    avalaraVersion?: ListResourcesAvalaraVersionEnum;
    xCorrelationId?: string;
}

export interface PatchResourceRequest {
    resourceId: string;
    avalaraVersion?: PatchResourceAvalaraVersionEnum;
    xCorrelationId?: string;
    ifMatch?: string;
    resource?: Resource;
}

export interface ReplaceResourceRequest {
    resourceId: string;
    avalaraVersion?: ReplaceResourceAvalaraVersionEnum;
    xCorrelationId?: string;
    ifMatch?: string;
    resource?: Resource;
}

/**
 * 
 */
export class ResourceApi extends runtime.ApiClient {

    /**
     * The response contains the same object as posted and fills in the newly assigned resource ID.
     * Create a resource.
     */
    async createResourceRaw(requestParameters: CreateResourceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Resource>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (this.configuration && this.configuration.bearerToken) {
            // oauth required
            headerParameters["Authorization"] = `Bearer ${this.configuration.bearerToken}`;
        }

        const response = await this.request({
            path: `/resources`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResourceToJSON(requestParameters.resource),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResourceFromJSON(jsonValue));
    }

    /**
     * The response contains the same object as posted and fills in the newly assigned resource ID.
     * Create a resource.
     */
    async createResource(requestParameters: CreateResourceRequest = {}, initOverrides?: RequestInit): Promise<Resource> {
        const response = await this.createResourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the resource by ID.
     * Delete a resource.
     */
    async deleteResourceRaw(requestParameters: DeleteResourceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.resourceId === null || requestParameters.resourceId === undefined) {
            throw new runtime.RequiredError('resourceId','Required parameter requestParameters.resourceId was null or undefined when calling deleteResource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (this.configuration && this.configuration.bearerToken) {
            // oauth required
            headerParameters["Authorization"] = `Bearer ${this.configuration.bearerToken}`;
        }

        const response = await this.request({
            path: `/resources/{resource-id}`.replace(`{${"resource-id"}}`, encodeURIComponent(String(requestParameters.resourceId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the resource by ID.
     * Delete a resource.
     */
    async deleteResource(requestParameters: DeleteResourceRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteResourceRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves the specified resource.
     * Retrieve a resource.
     */
    async getResourceRaw(requestParameters: GetResourceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Resource>> {
        if (requestParameters.resourceId === null || requestParameters.resourceId === undefined) {
            throw new runtime.RequiredError('resourceId','Required parameter requestParameters.resourceId was null or undefined when calling getResource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (this.configuration && this.configuration.bearerToken) {
            // oauth required
            headerParameters["Authorization"] = `Bearer ${this.configuration.bearerToken}`;
        }

        const response = await this.request({
            path: `/resources/{resource-id}`.replace(`{${"resource-id"}}`, encodeURIComponent(String(requestParameters.resourceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResourceFromJSON(jsonValue));
    }

    /**
     * Retrieves the specified resource.
     * Retrieve a resource.
     */
    async getResource(requestParameters: GetResourceRequest, initOverrides?: RequestInit): Promise<Resource> {
        const response = await this.getResourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all permissions a resource belongs to which the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:  * name
     * Get a list of all permissions on a resource.
     */
    async listResourcePermissionsRaw(requestParameters: ListResourcePermissionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PermissionList>> {
        if (requestParameters.resourceId === null || requestParameters.resourceId === undefined) {
            throw new runtime.RequiredError('resourceId','Required parameter requestParameters.resourceId was null or undefined when calling listResourcePermissions.');
        }

        const queryParameters: any = {};

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$orderBy !== undefined) {
            queryParameters['$orderBy'] = requestParameters.$orderBy;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.countOnly !== undefined) {
            queryParameters['countOnly'] = requestParameters.countOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (this.configuration && this.configuration.bearerToken) {
            // oauth required
            headerParameters["Authorization"] = `Bearer ${this.configuration.bearerToken}`;
        }

        const response = await this.request({
            path: `/resources/{resource-id}/permissions`.replace(`{${"resource-id"}}`, encodeURIComponent(String(requestParameters.resourceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all permissions a resource belongs to which the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:  * name
     * Get a list of all permissions on a resource.
     */
    async listResourcePermissions(requestParameters: ListResourcePermissionsRequest, initOverrides?: RequestInit): Promise<PermissionList> {
        const response = await this.listResourcePermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all resources the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties: * displayName * namespace * system/identifier
     * Get all resources which the user has access to.
     */
    async listResourcesRaw(requestParameters: ListResourcesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ResourceList>> {
        const queryParameters: any = {};

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$orderBy !== undefined) {
            queryParameters['$orderBy'] = requestParameters.$orderBy;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.countOnly !== undefined) {
            queryParameters['countOnly'] = requestParameters.countOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (this.configuration && this.configuration.bearerToken) {
            // oauth required
            headerParameters["Authorization"] = `Bearer ${this.configuration.bearerToken}`;
        }

        const response = await this.request({
            path: `/resources`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResourceListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all resources the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties: * displayName * namespace * system/identifier
     * Get all resources which the user has access to.
     */
    async listResources(requestParameters: ListResourcesRequest = {}, initOverrides?: RequestInit): Promise<ResourceList> {
        const response = await this.listResourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates only the fields passed in for the specified resource.
     * Update the passed in fields from the message on the resource.
     */
    async patchResourceRaw(requestParameters: PatchResourceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.resourceId === null || requestParameters.resourceId === undefined) {
            throw new runtime.RequiredError('resourceId','Required parameter requestParameters.resourceId was null or undefined when calling patchResource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (this.configuration && this.configuration.bearerToken) {
            // oauth required
            headerParameters["Authorization"] = `Bearer ${this.configuration.bearerToken}`;
        }

        const response = await this.request({
            path: `/resources/{resource-id}`.replace(`{${"resource-id"}}`, encodeURIComponent(String(requestParameters.resourceId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ResourceToJSON(requestParameters.resource),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates only the fields passed in for the specified resource.
     * Update the passed in fields from the message on the resource.
     */
    async patchResource(requestParameters: PatchResourceRequest, initOverrides?: RequestInit): Promise<void> {
        await this.patchResourceRaw(requestParameters, initOverrides);
    }

    /**
     * Replaces the specified resource with the resource in the body.
     * Update all fields on a resource.
     */
    async replaceResourceRaw(requestParameters: ReplaceResourceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.resourceId === null || requestParameters.resourceId === undefined) {
            throw new runtime.RequiredError('resourceId','Required parameter requestParameters.resourceId was null or undefined when calling replaceResource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (this.configuration && this.configuration.bearerToken) {
            // oauth required
            headerParameters["Authorization"] = `Bearer ${this.configuration.bearerToken}`;
        }

        const response = await this.request({
            path: `/resources/{resource-id}`.replace(`{${"resource-id"}}`, encodeURIComponent(String(requestParameters.resourceId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ResourceToJSON(requestParameters.resource),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Replaces the specified resource with the resource in the body.
     * Update all fields on a resource.
     */
    async replaceResource(requestParameters: ReplaceResourceRequest, initOverrides?: RequestInit): Promise<void> {
        await this.replaceResourceRaw(requestParameters, initOverrides);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum CreateResourceAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum DeleteResourceAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum GetResourceAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum ListResourcePermissionsAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum ListResourcesAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchResourceAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum ReplaceResourceAvalaraVersionEnum {
    _100 = '1.0.0'
}
