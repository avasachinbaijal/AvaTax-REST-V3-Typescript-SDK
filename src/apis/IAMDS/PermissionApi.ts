/* tslint:disable */
/* eslint-disable */
/**
 * foundation
 * Platform foundation consists of services on top of which the Avalara Compliance Cloud platform is built. These services are foundational and provide functionality such as common organization, tenant and user management for the rest of the compliance platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import {
    Permission,
    PermissionFromJSON,
    PermissionToJSON,
    PermissionList,
    PermissionListFromJSON,
    PermissionListToJSON,
    VersionError,
    VersionErrorFromJSON,
    VersionErrorToJSON,
} from '../../packages/IAMDS';

export interface CreatePermissionRequest {
    avalaraVersion?: CreatePermissionAvalaraVersionEnum;
    xCorrelationId?: string;
    permission?: Permission;
}

export interface DeletePermissionRequest {
    permissionId: string;
    avalaraVersion?: DeletePermissionAvalaraVersionEnum;
    xCorrelationId?: string;
    ifMatch?: string;
}

export interface GetPermissionRequest {
    permissionId: string;
    avalaraVersion?: GetPermissionAvalaraVersionEnum;
    xCorrelationId?: string;
    ifNoneMatch?: string;
}

export interface ListPermissionsRequest {
    $filter?: string;
    $top?: string;
    $skip?: string;
    $orderBy?: string;
    count?: boolean;
    countOnly?: boolean;
    avalaraVersion?: ListPermissionsAvalaraVersionEnum;
    xCorrelationId?: string;
}

export interface PatchPermissionRequest {
    permissionId: string;
    avalaraVersion?: PatchPermissionAvalaraVersionEnum;
    xCorrelationId?: string;
    ifMatch?: string;
    permission?: Permission;
}

export interface ReplacePermissionRequest {
    permissionId: string;
    avalaraVersion?: ReplacePermissionAvalaraVersionEnum;
    xCorrelationId?: string;
    ifMatch?: string;
    permission?: Permission;
}

/**
 * 
 */
export class PermissionApi extends runtime.ApiClient {

    /**
     * The response contains the same object as posted and fills in the newly assigned permission ID.
     * Create a permission.
     */
    async createPermissionRaw(requestParameters: CreatePermissionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Permission>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["iam", "TestScope", "TestScope1"]);
        }

        const response = await this.request({
            path: `/permissions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PermissionToJSON(requestParameters.permission),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionFromJSON(jsonValue));
    }

    /**
     * The response contains the same object as posted and fills in the newly assigned permission ID.
     * Create a permission.
     */
    async createPermission(requestParameters: CreatePermissionRequest = {}, initOverrides?: RequestInit): Promise<Permission> {
        const response = await this.createPermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the permission by ID.
     * Delete a permission.
     */
    async deletePermissionRaw(requestParameters: DeletePermissionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.permissionId === null || requestParameters.permissionId === undefined) {
            throw new runtime.RequiredError('permissionId','Required parameter requestParameters.permissionId was null or undefined when calling deletePermission.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["iam", "TestScope", "TestScope1"]);
        }

        const response = await this.request({
            path: `/permissions/{permission-id}`.replace(`{${"permission-id"}}`, encodeURIComponent(String(requestParameters.permissionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the permission by ID.
     * Delete a permission.
     */
    async deletePermission(requestParameters: DeletePermissionRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deletePermissionRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves the specified permission.
     * Retrieve a permission.
     */
    async getPermissionRaw(requestParameters: GetPermissionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Permission>> {
        if (requestParameters.permissionId === null || requestParameters.permissionId === undefined) {
            throw new runtime.RequiredError('permissionId','Required parameter requestParameters.permissionId was null or undefined when calling getPermission.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["iam", "TestScope", "TestScope1"]);
        }

        const response = await this.request({
            path: `/permissions/{permission-id}`.replace(`{${"permission-id"}}`, encodeURIComponent(String(requestParameters.permissionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionFromJSON(jsonValue));
    }

    /**
     * Retrieves the specified permission.
     * Retrieve a permission.
     */
    async getPermission(requestParameters: GetPermissionRequest, initOverrides?: RequestInit): Promise<Permission> {
        const response = await this.getPermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all permissions the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:  * resource/identifier * name
     * Get all permissions which the user has access to.
     */
    async listPermissionsRaw(requestParameters: ListPermissionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PermissionList>> {
        const queryParameters: any = {};

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$orderBy !== undefined) {
            queryParameters['$orderBy'] = requestParameters.$orderBy;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.countOnly !== undefined) {
            queryParameters['countOnly'] = requestParameters.countOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["iam", "TestScope", "TestScope1"]);
        }

        const response = await this.request({
            path: `/permissions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all permissions the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:  * resource/identifier * name
     * Get all permissions which the user has access to.
     */
    async listPermissions(requestParameters: ListPermissionsRequest = {}, initOverrides?: RequestInit): Promise<PermissionList> {
        const response = await this.listPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates only the fields passed in for the specified permission.
     * Update the fields present in the message body on the permission.
     */
    async patchPermissionRaw(requestParameters: PatchPermissionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.permissionId === null || requestParameters.permissionId === undefined) {
            throw new runtime.RequiredError('permissionId','Required parameter requestParameters.permissionId was null or undefined when calling patchPermission.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["iam", "TestScope", "TestScope1"]);
        }

        const response = await this.request({
            path: `/permissions/{permission-id}`.replace(`{${"permission-id"}}`, encodeURIComponent(String(requestParameters.permissionId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PermissionToJSON(requestParameters.permission),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates only the fields passed in for the specified permission.
     * Update the fields present in the message body on the permission.
     */
    async patchPermission(requestParameters: PatchPermissionRequest, initOverrides?: RequestInit): Promise<void> {
        await this.patchPermissionRaw(requestParameters, initOverrides);
    }

    /**
     * Replaces the specified permission with the permission in the body.
     * Update all fields on a permission.
     */
    async replacePermissionRaw(requestParameters: ReplacePermissionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.permissionId === null || requestParameters.permissionId === undefined) {
            throw new runtime.RequiredError('permissionId','Required parameter requestParameters.permissionId was null or undefined when calling replacePermission.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["iam", "TestScope", "TestScope1"]);
        }

        const response = await this.request({
            path: `/permissions/{permission-id}`.replace(`{${"permission-id"}}`, encodeURIComponent(String(requestParameters.permissionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PermissionToJSON(requestParameters.permission),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Replaces the specified permission with the permission in the body.
     * Update all fields on a permission.
     */
    async replacePermission(requestParameters: ReplacePermissionRequest, initOverrides?: RequestInit): Promise<void> {
        await this.replacePermissionRaw(requestParameters, initOverrides);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum CreatePermissionAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum DeletePermissionAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum GetPermissionAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum ListPermissionsAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchPermissionAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum ReplacePermissionAvalaraVersionEnum {
    _100 = '1.0.0'
}
