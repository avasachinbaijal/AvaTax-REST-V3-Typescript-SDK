/* tslint:disable */
/* eslint-disable */
/**
 * foundation
 * Platform foundation consists of services on top of which the Avalara Compliance Cloud platform is built. These services are foundational and provide functionality such as common organization, tenant and user management for the rest of the compliance platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import { RequestInit } from 'node-fetch';
import {
    FeatureList,
    FeatureListFromJSON,
    FeatureListToJSON,
    GrantList,
    GrantListFromJSON,
    GrantListToJSON,
    ResourceList,
    ResourceListFromJSON,
    ResourceListToJSON,
    RoleList,
    RoleListFromJSON,
    RoleListToJSON,
    System,
    SystemFromJSON,
    SystemToJSON,
    SystemList,
    SystemListFromJSON,
    SystemListToJSON,
    VersionError,
    VersionErrorFromJSON,
    VersionErrorToJSON,
} from '../../packages/IAMDS';

export interface CreateSystemRequest {
    avalaraVersion?: CreateSystemAvalaraVersionEnum;
    xCorrelationId?: string;
    system?: System;
}

export interface DeleteSystemRequest {
    systemId: string;
    avalaraVersion?: DeleteSystemAvalaraVersionEnum;
    xCorrelationId?: string;
    ifMatch?: string;
}

export interface GetSystemRequest {
    systemId: string;
    avalaraVersion?: GetSystemAvalaraVersionEnum;
    xCorrelationId?: string;
    ifNoneMatch?: string;
}

export interface ListSystemFeaturesRequest {
    systemId: string;
    $filter?: string;
    $top?: string;
    $skip?: string;
    $orderBy?: string;
    count?: boolean;
    countOnly?: boolean;
    avalaraVersion?: ListSystemFeaturesAvalaraVersionEnum;
    xCorrelationId?: string;
}

export interface ListSystemGrantsRequest {
    systemId: string;
    $filter?: string;
    $top?: string;
    $skip?: string;
    $orderBy?: string;
    count?: boolean;
    countOnly?: boolean;
    avalaraVersion?: ListSystemGrantsAvalaraVersionEnum;
    xCorrelationId?: string;
}

export interface ListSystemResourcesRequest {
    systemId: string;
    $filter?: string;
    $top?: string;
    $skip?: string;
    $orderBy?: string;
    count?: boolean;
    countOnly?: boolean;
    avalaraVersion?: ListSystemResourcesAvalaraVersionEnum;
    xCorrelationId?: string;
}

export interface ListSystemRolesRequest {
    systemId: string;
    $filter?: string;
    $top?: string;
    $skip?: string;
    $orderBy?: string;
    count?: boolean;
    countOnly?: boolean;
    avalaraVersion?: ListSystemRolesAvalaraVersionEnum;
    xCorrelationId?: string;
}

export interface ListSystemsRequest {
    $filter?: string;
    $top?: string;
    $skip?: string;
    $orderBy?: string;
    count?: boolean;
    countOnly?: boolean;
    avalaraVersion?: ListSystemsAvalaraVersionEnum;
    xCorrelationId?: string;
}

export interface PatchSystemRequest {
    systemId: string;
    avalaraVersion?: PatchSystemAvalaraVersionEnum;
    xCorrelationId?: string;
    ifMatch?: string;
    system?: System;
}

export interface ReplaceSystemRequest {
    systemId: string;
    avalaraVersion?: ReplaceSystemAvalaraVersionEnum;
    xCorrelationId?: string;
    ifMatch?: string;
    system?: System;
}

/**
 * 
 */
export class SystemApi extends runtime.ApiClient {
    public sdkVersion: string = '2.4.41';

    constructor(apiClient: runtime.ApiClient) {
        super(apiClient.configuration);
    }

    /**
     * The response contains the same object as posted and fills in the newly assigned system ID.
     * Create a system.
     */
    async createSystemRaw(requestParameters: CreateSystemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<System>> {
        const queryParameters: any = {};
        const requiredScopes = "iam TestScope TestScope1";
        const authNames: string[] = ['OAuth'];
        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const response = await this.request({
            path: `/systems`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemToJSON(requestParameters.system),
        }, initOverrides, requiredScopes);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemFromJSON(jsonValue));
    }

    /**
     * The response contains the same object as posted and fills in the newly assigned system ID.
     * Create a system.
     */
    async createSystem(requestParameters: CreateSystemRequest = {}, initOverrides?: RequestInit): Promise<System> {
        const response = await this.createSystemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the specified system as well as related features, resources, and resource permissions.
     * Delete a system.
     */
    async deleteSystemRaw(requestParameters: DeleteSystemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling deleteSystem.');
        }

        const queryParameters: any = {};
        const requiredScopes = "iam TestScope TestScope1";
        const authNames: string[] = ['OAuth'];
        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const response = await this.request({
            path: `/systems/{system-id}`.replace(`{${"system-id"}}`, encodeURIComponent(String(requestParameters.systemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides, requiredScopes);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the specified system as well as related features, resources, and resource permissions.
     * Delete a system.
     */
    async deleteSystem(requestParameters: DeleteSystemRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteSystemRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a system based on its ID.
     * Retrieve a system.
     */
    async getSystemRaw(requestParameters: GetSystemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<System>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling getSystem.');
        }

        const queryParameters: any = {};
        const requiredScopes = "iam TestScope TestScope1";
        const authNames: string[] = ['OAuth'];
        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const response = await this.request({
            path: `/systems/{system-id}`.replace(`{${"system-id"}}`, encodeURIComponent(String(requestParameters.systemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides, requiredScopes);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemFromJSON(jsonValue));
    }

    /**
     * Retrieves a system based on its ID.
     * Retrieve a system.
     */
    async getSystem(requestParameters: GetSystemRequest, initOverrides?: RequestInit): Promise<System> {
        const response = await this.getSystemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all features associated with the system and which the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:  * displayName * grants/identifier
     * List all features on a system.
     */
    async listSystemFeaturesRaw(requestParameters: ListSystemFeaturesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FeatureList>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling listSystemFeatures.');
        }

        const queryParameters: any = {};
        const requiredScopes = "iam TestScope TestScope1";
        const authNames: string[] = ['OAuth'];
        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$orderBy !== undefined) {
            queryParameters['$orderBy'] = requestParameters.$orderBy;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.countOnly !== undefined) {
            queryParameters['countOnly'] = requestParameters.countOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const response = await this.request({
            path: `/systems/{system-id}/features`.replace(`{${"system-id"}}`, encodeURIComponent(String(requestParameters.systemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides, requiredScopes);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all features associated with the system and which the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:  * displayName * grants/identifier
     * List all features on a system.
     */
    async listSystemFeatures(requestParameters: ListSystemFeaturesRequest, initOverrides?: RequestInit): Promise<FeatureList> {
        const response = await this.listSystemFeaturesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all grants associated with the selected system and which the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:  * displayName * type * role/identifier
     * List all grants associated with a system.
     */
    async listSystemGrantsRaw(requestParameters: ListSystemGrantsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GrantList>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling listSystemGrants.');
        }

        const queryParameters: any = {};
        const requiredScopes = "iam TestScope TestScope1";
        const authNames: string[] = ['OAuth'];
        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$orderBy !== undefined) {
            queryParameters['$orderBy'] = requestParameters.$orderBy;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.countOnly !== undefined) {
            queryParameters['countOnly'] = requestParameters.countOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const response = await this.request({
            path: `/systems/{system-id}/grants`.replace(`{${"system-id"}}`, encodeURIComponent(String(requestParameters.systemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides, requiredScopes);

        return new runtime.JSONApiResponse(response, (jsonValue) => GrantListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all grants associated with the selected system and which the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:  * displayName * type * role/identifier
     * List all grants associated with a system.
     */
    async listSystemGrants(requestParameters: ListSystemGrantsRequest, initOverrides?: RequestInit): Promise<GrantList> {
        const response = await this.listSystemGrantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all features associated with the selected system and which the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:  * displayName * namespace
     * List all resources associated with a system.
     */
    async listSystemResourcesRaw(requestParameters: ListSystemResourcesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ResourceList>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling listSystemResources.');
        }

        const queryParameters: any = {};
        const requiredScopes = "iam TestScope TestScope1";
        const authNames: string[] = ['OAuth'];
        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$orderBy !== undefined) {
            queryParameters['$orderBy'] = requestParameters.$orderBy;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.countOnly !== undefined) {
            queryParameters['countOnly'] = requestParameters.countOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const response = await this.request({
            path: `/systems/{system-id}/resources`.replace(`{${"system-id"}}`, encodeURIComponent(String(requestParameters.systemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides, requiredScopes);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResourceListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all features associated with the selected system and which the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:  * displayName * namespace
     * List all resources associated with a system.
     */
    async listSystemResources(requestParameters: ListSystemResourcesRequest, initOverrides?: RequestInit): Promise<ResourceList> {
        const response = await this.listSystemResourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all roles associated with the selected system and which the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:  * displayName * type * permissions
     * List all roles associated with a system.
     */
    async listSystemRolesRaw(requestParameters: ListSystemRolesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RoleList>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling listSystemRoles.');
        }

        const queryParameters: any = {};
        const requiredScopes = "iam TestScope TestScope1";
        const authNames: string[] = ['OAuth'];
        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$orderBy !== undefined) {
            queryParameters['$orderBy'] = requestParameters.$orderBy;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.countOnly !== undefined) {
            queryParameters['countOnly'] = requestParameters.countOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const response = await this.request({
            path: `/systems/{system-id}/roles`.replace(`{${"system-id"}}`, encodeURIComponent(String(requestParameters.systemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides, requiredScopes);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all roles associated with the selected system and which the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:  * displayName * type * permissions
     * List all roles associated with a system.
     */
    async listSystemRoles(requestParameters: ListSystemRolesRequest, initOverrides?: RequestInit): Promise<RoleList> {
        const response = await this.listSystemRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all systems the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:  * displayName * namespace * scopes/scope
     * List all systems which the user has access to.
     */
    async listSystemsRaw(requestParameters: ListSystemsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SystemList>> {
        const queryParameters: any = {};
        const requiredScopes = "iam TestScope TestScope1";
        const authNames: string[] = ['OAuth'];
        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$orderBy !== undefined) {
            queryParameters['$orderBy'] = requestParameters.$orderBy;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.countOnly !== undefined) {
            queryParameters['countOnly'] = requestParameters.countOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const response = await this.request({
            path: `/systems`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides, requiredScopes);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all systems the authenticated user has access to. This list is paged, returning no more than 1000 items at a time.  Filterable properties:  * displayName * namespace * scopes/scope
     * List all systems which the user has access to.
     */
    async listSystems(requestParameters: ListSystemsRequest = {}, initOverrides?: RequestInit): Promise<SystemList> {
        const response = await this.listSystemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the fields in the payload.
     * Update fields present in the message body on the system.
     */
    async patchSystemRaw(requestParameters: PatchSystemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling patchSystem.');
        }

        const queryParameters: any = {};
        const requiredScopes = "iam TestScope TestScope1";
        const authNames: string[] = ['OAuth'];
        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const response = await this.request({
            path: `/systems/{system-id}`.replace(`{${"system-id"}}`, encodeURIComponent(String(requestParameters.systemId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SystemToJSON(requestParameters.system),
        }, initOverrides, requiredScopes);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the fields in the payload.
     * Update fields present in the message body on the system.
     */
    async patchSystem(requestParameters: PatchSystemRequest, initOverrides?: RequestInit): Promise<void> {
        await this.patchSystemRaw(requestParameters, initOverrides);
    }

    /**
     * Replaces the specified system with the system in the body.
     * Update all fields on a system.
     */
    async replaceSystemRaw(requestParameters: ReplaceSystemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling replaceSystem.');
        }

        const queryParameters: any = {};
        const requiredScopes = "iam TestScope TestScope1";
        const authNames: string[] = ['OAuth'];
        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const response = await this.request({
            path: `/systems/{system-id}`.replace(`{${"system-id"}}`, encodeURIComponent(String(requestParameters.systemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SystemToJSON(requestParameters.system),
        }, initOverrides, requiredScopes);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Replaces the specified system with the system in the body.
     * Update all fields on a system.
     */
    async replaceSystem(requestParameters: ReplaceSystemRequest, initOverrides?: RequestInit): Promise<void> {
        await this.replaceSystemRaw(requestParameters, initOverrides);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum CreateSystemAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum DeleteSystemAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum GetSystemAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum ListSystemFeaturesAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum ListSystemGrantsAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum ListSystemResourcesAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum ListSystemRolesAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum ListSystemsAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchSystemAvalaraVersionEnum {
    _100 = '1.0.0'
}
/**
    * @export
    * @enum {string}
    */
export enum ReplaceSystemAvalaraVersionEnum {
    _100 = '1.0.0'
}
