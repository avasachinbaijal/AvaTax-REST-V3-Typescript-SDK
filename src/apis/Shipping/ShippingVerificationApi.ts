/* tslint:disable */
/* eslint-disable */
/**
 * Avalara Shipping Verification for Beverage Alcohol
 * API for evaluating transactions against direct-to-consumer Beverage Alcohol shipping regulations.  This API is currently in beta. 
 *
 * The version of the OpenAPI document: 2.1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import { RequestInit } from 'node-fetch';
import {
    ErrorDetails,
    ErrorDetailsFromJSON,
    ErrorDetailsToJSON,
    ShippingVerifyResult,
    ShippingVerifyResultFromJSON,
    ShippingVerifyResultToJSON,
} from '../../packages/Shipping';

export interface DeregisterShipmentRequest {
    companyCode: string;
    transactionCode: string;
    documentType?: DeregisterShipmentDocumentTypeEnum;
}

export interface RegisterShipmentRequest {
    companyCode: string;
    transactionCode: string;
    documentType?: RegisterShipmentDocumentTypeEnum;
}

export interface RegisterShipmentIfCompliantRequest {
    companyCode: string;
    transactionCode: string;
    documentType?: RegisterShipmentIfCompliantDocumentTypeEnum;
}

export interface VerifyShipmentRequest {
    companyCode: string;
    transactionCode: string;
    documentType?: VerifyShipmentDocumentTypeEnum;
}

/**
 * 
 */
export class ShippingVerificationApi extends runtime.ApiClient {
    public sdkVersion: string = '2.4.41';

    constructor(apiClient: runtime.ApiClient) {
        super(apiClient.configuration);
    }

    /**
     * Removes the transaction from consideration when evaluating regulations that span multiple transactions.
     */
    async deregisterShipmentRaw(requestParameters: DeregisterShipmentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling deregisterShipment.');
        }

        if (requestParameters.transactionCode === null || requestParameters.transactionCode === undefined) {
            throw new runtime.RequiredError('transactionCode','Required parameter requestParameters.transactionCode was null or undefined when calling deregisterShipment.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['BasicAuth', 'Bearer'];
        if (requestParameters.documentType !== undefined) {
            queryParameters['documentType'] = requestParameters.documentType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const response = await this.request({
            path: `/api/v2/companies/{companyCode}/transactions/{transactionCode}/shipment/registration`.replace(`{${"companyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))).replace(`{${"transactionCode"}}`, encodeURIComponent(String(requestParameters.transactionCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes the transaction from consideration when evaluating regulations that span multiple transactions.
     */
    async deregisterShipment(requestParameters: DeregisterShipmentRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deregisterShipmentRaw(requestParameters, initOverrides);
    }

    /**
     * Registers the transaction so that it may be included when evaluating regulations that span multiple transactions.
     */
    async registerShipmentRaw(requestParameters: RegisterShipmentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling registerShipment.');
        }

        if (requestParameters.transactionCode === null || requestParameters.transactionCode === undefined) {
            throw new runtime.RequiredError('transactionCode','Required parameter requestParameters.transactionCode was null or undefined when calling registerShipment.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['BasicAuth', 'Bearer'];
        if (requestParameters.documentType !== undefined) {
            queryParameters['documentType'] = requestParameters.documentType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const response = await this.request({
            path: `/api/v2/companies/{companyCode}/transactions/{transactionCode}/shipment/registration`.replace(`{${"companyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))).replace(`{${"transactionCode"}}`, encodeURIComponent(String(requestParameters.transactionCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Registers the transaction so that it may be included when evaluating regulations that span multiple transactions.
     */
    async registerShipment(requestParameters: RegisterShipmentRequest, initOverrides?: RequestInit): Promise<void> {
        await this.registerShipmentRaw(requestParameters, initOverrides);
    }

    /**
     * Evaluates a transaction against a set of direct-to-consumer shipping regulations and, if compliant, registers the transaction so that it may be included when evaluating regulations that span multiple transactions.
     */
    async registerShipmentIfCompliantRaw(requestParameters: RegisterShipmentIfCompliantRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ShippingVerifyResult>> {
        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling registerShipmentIfCompliant.');
        }

        if (requestParameters.transactionCode === null || requestParameters.transactionCode === undefined) {
            throw new runtime.RequiredError('transactionCode','Required parameter requestParameters.transactionCode was null or undefined when calling registerShipmentIfCompliant.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['BasicAuth', 'Bearer'];
        if (requestParameters.documentType !== undefined) {
            queryParameters['documentType'] = requestParameters.documentType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const response = await this.request({
            path: `/api/v2/companies/{companyCode}/transactions/{transactionCode}/shipment/registerIfCompliant`.replace(`{${"companyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))).replace(`{${"transactionCode"}}`, encodeURIComponent(String(requestParameters.transactionCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingVerifyResultFromJSON(jsonValue));
    }

    /**
     * Evaluates a transaction against a set of direct-to-consumer shipping regulations and, if compliant, registers the transaction so that it may be included when evaluating regulations that span multiple transactions.
     */
    async registerShipmentIfCompliant(requestParameters: RegisterShipmentIfCompliantRequest, initOverrides?: RequestInit): Promise<ShippingVerifyResult> {
        const response = await this.registerShipmentIfCompliantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The transaction and its lines must meet the following criteria in order to be evaluated: * The transaction must be recorded. Using a type of *SalesInvoice* is recommended. * A parameter with the name *AlcoholRouteType* must be specified and the value must be one of the following: \'*DTC*\', \'*Retailer DTC*\' * A parameter with the name *RecipientName* must be specified and the value must be the name of the recipient. * Each alcohol line must include a *ContainerSize* parameter that describes the volume of a single container. Use the *unit* field to specify one of the following units: \'*Litre*\', \'*Millilitre*\', \'*gallon (US fluid)*\', \'*quart (US fluid)*\', \'*ounce (fluid US customary)*\' * Each alcohol line must include a *PackSize* parameter that describes the number of containers in a pack. Specify *Count* in the *unit* field.  Optionally, the transaction and its lines may use the following parameters: * The *ShipDate* parameter may be used if the date of shipment is different than the date of the transaction. The value should be ISO-8601 compliant (e.g. 2020-07-21). * The *RecipientDOB* parameter may be used to evaluate age restrictions. The value should be ISO-8601 compliant (e.g. 2020-07-21). * The *PurchaserDOB* parameter may be used to evaluate age restrictions. The value should be ISO-8601 compliant (e.g. 2020-07-21). * The *SalesLocation* parameter may be used to describe whether the sale was made *OnSite* or *OffSite*. *OffSite* is the default value. * The *AlcoholContent* parameter may be used to describe the alcohol percentage by volume of the item. Specify *Percentage* in the *unit* field.  **Security Policies** This API depends on all of the following active subscriptions: *AvaAlcohol, AutoAddress, AvaTaxPro*
     * Evaluates a transaction against a set of direct-to-consumer shipping regulations.
     */
    async verifyShipmentRaw(requestParameters: VerifyShipmentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ShippingVerifyResult>> {
        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling verifyShipment.');
        }

        if (requestParameters.transactionCode === null || requestParameters.transactionCode === undefined) {
            throw new runtime.RequiredError('transactionCode','Required parameter requestParameters.transactionCode was null or undefined when calling verifyShipment.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['BasicAuth', 'Bearer'];
        if (requestParameters.documentType !== undefined) {
            queryParameters['documentType'] = requestParameters.documentType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const response = await this.request({
            path: `/api/v2/companies/{companyCode}/transactions/{transactionCode}/shipment/verify`.replace(`{${"companyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))).replace(`{${"transactionCode"}}`, encodeURIComponent(String(requestParameters.transactionCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingVerifyResultFromJSON(jsonValue));
    }

    /**
     * The transaction and its lines must meet the following criteria in order to be evaluated: * The transaction must be recorded. Using a type of *SalesInvoice* is recommended. * A parameter with the name *AlcoholRouteType* must be specified and the value must be one of the following: \'*DTC*\', \'*Retailer DTC*\' * A parameter with the name *RecipientName* must be specified and the value must be the name of the recipient. * Each alcohol line must include a *ContainerSize* parameter that describes the volume of a single container. Use the *unit* field to specify one of the following units: \'*Litre*\', \'*Millilitre*\', \'*gallon (US fluid)*\', \'*quart (US fluid)*\', \'*ounce (fluid US customary)*\' * Each alcohol line must include a *PackSize* parameter that describes the number of containers in a pack. Specify *Count* in the *unit* field.  Optionally, the transaction and its lines may use the following parameters: * The *ShipDate* parameter may be used if the date of shipment is different than the date of the transaction. The value should be ISO-8601 compliant (e.g. 2020-07-21). * The *RecipientDOB* parameter may be used to evaluate age restrictions. The value should be ISO-8601 compliant (e.g. 2020-07-21). * The *PurchaserDOB* parameter may be used to evaluate age restrictions. The value should be ISO-8601 compliant (e.g. 2020-07-21). * The *SalesLocation* parameter may be used to describe whether the sale was made *OnSite* or *OffSite*. *OffSite* is the default value. * The *AlcoholContent* parameter may be used to describe the alcohol percentage by volume of the item. Specify *Percentage* in the *unit* field.  **Security Policies** This API depends on all of the following active subscriptions: *AvaAlcohol, AutoAddress, AvaTaxPro*
     * Evaluates a transaction against a set of direct-to-consumer shipping regulations.
     */
    async verifyShipment(requestParameters: VerifyShipmentRequest, initOverrides?: RequestInit): Promise<ShippingVerifyResult> {
        const response = await this.verifyShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum DeregisterShipmentDocumentTypeEnum {
    SalesInvoice = 'SalesInvoice',
    ReturnInvoice = 'ReturnInvoice'
}
/**
    * @export
    * @enum {string}
    */
export enum RegisterShipmentDocumentTypeEnum {
    SalesInvoice = 'SalesInvoice',
    ReturnInvoice = 'ReturnInvoice'
}
/**
    * @export
    * @enum {string}
    */
export enum RegisterShipmentIfCompliantDocumentTypeEnum {
    SalesInvoice = 'SalesInvoice',
    ReturnInvoice = 'ReturnInvoice'
}
/**
    * @export
    * @enum {string}
    */
export enum VerifyShipmentDocumentTypeEnum {
    SalesInvoice = 'SalesInvoice',
    ReturnInvoice = 'ReturnInvoice'
}
