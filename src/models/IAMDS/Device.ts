/* tslint:disable */
/* eslint-disable */
/**
 * foundation
 * Platform foundation consists of services on top of which the Avalara Compliance Cloud platform is built. These services are foundational and provide functionality such as common organization, tenant and user management for the rest of the compliance platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import {
    Aspect,
    AspectFromJSON,
    AspectFromJSONTyped,
    AspectToJSON,
} from './Aspect';
import {
    Instance,
    InstanceFromJSON,
    InstanceFromJSONTyped,
    InstanceToJSON,
} from './Instance';
import {
    InstanceMeta,
    InstanceMetaFromJSON,
    InstanceMetaFromJSONTyped,
    InstanceMetaToJSON,
} from './InstanceMeta';
import {
    Reference,
    ReferenceFromJSON,
    ReferenceFromJSONTyped,
    ReferenceToJSON,
} from './Reference';
import {
    Tag,
    TagFromJSON,
    TagFromJSONTyped,
    TagToJSON,
} from './Tag';

/**
 * Representation of a Device
 * @export
 * @interface Device
 */
export interface Device {
    /**
     * Name of the Device, used for display purposes
     * @type {string}
     * @memberof Device
     */
    displayName: string;
    /**
     * 
     * @type {Reference}
     * @memberof Device
     */
    tenant: Reference;
    /**
     * Identity of the device, for example, a public X.509 certificate
     * @type {string}
     * @memberof Device
     */
    identity: string;
    /**
     * A Boolean value indicating the Device's administrative status
     * @type {boolean}
     * @memberof Device
     */
    active?: boolean;
    /**
     * List of grants associated with the Device
     * @type {Array<Reference>}
     * @memberof Device
     */
    grants?: Array<Reference>;
    /**
     * List of groups to which the Device belongs
     * @type {Array<Reference>}
     * @memberof Device
     */
    groups?: Array<Reference>;
    /**
     * Unique identifier for the Object
     * @type {string}
     * @memberof Device
     */
    readonly id: string;
    /**
     * 
     * @type {InstanceMeta}
     * @memberof Device
     */
    meta?: InstanceMeta;
    /**
     * Identifier of the Resource (if any) in other systems
     * @type {Array<Aspect>}
     * @memberof Device
     */
    aspects?: Array<Aspect>;
    /**
     * User defined tags in the form of key:value pair
     * @type {Array<Tag>}
     * @memberof Device
     */
    tags?: Array<Tag>;
}



export function DeviceFromJSON(json: any): Device {
    return DeviceFromJSONTyped(json, false);
}

export function DeviceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Device {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'displayName': json['displayName'],
        'tenant': ReferenceFromJSON(json['tenant']),
        'identity': json['identity'],
        'active': !exists(json, 'active') ? undefined : json['active'],
        'grants': !exists(json, 'grants') ? undefined : ((json['grants'] as Array<any>).map(ReferenceFromJSON)),
        'groups': !exists(json, 'groups') ? undefined : ((json['groups'] as Array<any>).map(ReferenceFromJSON)),
        'id': json['id'],
        'meta': !exists(json, 'meta') ? undefined : InstanceMetaFromJSON(json['meta']),
        'aspects': !exists(json, 'aspects') ? undefined : ((json['aspects'] as Array<any>).map(AspectFromJSON)),
        'tags': !exists(json, 'tags') ? undefined : ((json['tags'] as Array<any>).map(TagFromJSON)),
    };
}

export function DeviceToJSON(value?: Device | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'displayName': value.displayName,
        'tenant': ReferenceToJSON(value.tenant),
        'identity': value.identity,
        'active': value.active,
        'grants': value.grants === undefined ? undefined : ((value.grants as Array<any>).map(ReferenceToJSON)),
        'groups': value.groups === undefined ? undefined : ((value.groups as Array<any>).map(ReferenceToJSON)),
        'meta': InstanceMetaToJSON(value.meta),
        'aspects': value.aspects === undefined ? undefined : ((value.aspects as Array<any>).map(AspectToJSON)),
        'tags': value.tags === undefined ? undefined : ((value.tags as Array<any>).map(TagToJSON)),
    };
}
