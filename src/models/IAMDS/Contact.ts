/* tslint:disable */
/* eslint-disable */
/**
 * foundation
 * Platform foundation consists of services on top of which the Avalara Compliance Cloud platform is built. These services are foundational and provide functionality such as common organization, tenant and user management for the rest of the compliance platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import {
    ContactEmails,
    ContactEmailsFromJSON,
    ContactEmailsFromJSONTyped,
    ContactEmailsToJSON,
} from './ContactEmails';
import {
    ContactName,
    ContactNameFromJSON,
    ContactNameFromJSONTyped,
    ContactNameToJSON,
} from './ContactName';
import {
    ContactPhoneNumbers,
    ContactPhoneNumbersFromJSON,
    ContactPhoneNumbersFromJSONTyped,
    ContactPhoneNumbersToJSON,
} from './ContactPhoneNumbers';
import {
    Reference,
    ReferenceFromJSON,
    ReferenceFromJSONTyped,
    ReferenceToJSON,
} from './Reference';

/**
 * Representation of a contact within the Avalara Compliance Cloud platform
 * @export
 * @interface Contact
 */
export interface Contact {
    /**
     * Source of truth for the contact
     * @type {string}
     * @memberof Contact
     */
    source: ContactSourceEnum;
    /**
     * 
     * @type {Reference}
     * @memberof Contact
     */
    user?: Reference;
    /**
     * 
     * @type {ContactName}
     * @memberof Contact
     */
    name: ContactName;
    /**
     * Type of contact
     * @type {string}
     * @memberof Contact
     */
    contactType?: string;
    /**
     * 
     * @type {Array<ContactEmails>}
     * @memberof Contact
     */
    emails: Array<ContactEmails>;
    /**
     * 
     * @type {Array<ContactPhoneNumbers>}
     * @memberof Contact
     */
    phoneNumbers?: Array<ContactPhoneNumbers>;
}

/**
* @export
* @enum {string}
*/
export enum ContactSourceEnum {
    Referenced = 'referenced',
    Managed = 'managed'
}

export function ContactFromJSON(json: any): Contact {
    return ContactFromJSONTyped(json, false);
}

export function ContactFromJSONTyped(json: any, ignoreDiscriminator: boolean): Contact {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'source': json['source'],
        'user': !exists(json, 'user') ? undefined : ReferenceFromJSON(json['user']),
        'name': ContactNameFromJSON(json['name']),
        'contactType': !exists(json, 'contactType') ? undefined : json['contactType'],
        'emails': ((json['emails'] as Array<any>).map(ContactEmailsFromJSON)),
        'phoneNumbers': !exists(json, 'phoneNumbers') ? undefined : ((json['phoneNumbers'] as Array<any>).map(ContactPhoneNumbersFromJSON)),
    };
}

export function ContactToJSON(value?: Contact | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'source': value.source,
        'user': ReferenceToJSON(value.user),
        'name': ContactNameToJSON(value.name),
        'contactType': value.contactType,
        'emails': ((value.emails as Array<any>).map(ContactEmailsToJSON)),
        'phoneNumbers': value.phoneNumbers === undefined ? undefined : ((value.phoneNumbers as Array<any>).map(ContactPhoneNumbersToJSON)),
    };
}
