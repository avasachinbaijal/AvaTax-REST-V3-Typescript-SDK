/* tslint:disable */
/* eslint-disable */
/**
 * foundation
 * Platform foundation consists of services on top of which the Avalara Compliance Cloud platform is built. These services are foundational and provide functionality such as common organization, tenant and user management for the rest of the compliance platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import {
    Aspect,
    AspectFromJSON,
    AspectFromJSONTyped,
    AspectToJSON,
} from './Aspect';
import {
    Instance,
    InstanceFromJSON,
    InstanceFromJSONTyped,
    InstanceToJSON,
} from './Instance';
import {
    InstanceMeta,
    InstanceMetaFromJSON,
    InstanceMetaFromJSONTyped,
    InstanceMetaToJSON,
} from './InstanceMeta';
import {
    Reference,
    ReferenceFromJSON,
    ReferenceFromJSONTyped,
    ReferenceToJSON,
} from './Reference';
import {
    Tag,
    TagFromJSON,
    TagFromJSONTyped,
    TagToJSON,
} from './Tag';

/**
 * An App represents any software package that intends to interact with Avalara Compliance Cloud
 * @export
 * @interface App
 */
export interface App {
    /**
     * Name of the App/Service
     * @type {string}
     * @memberof App
     */
    displayName: string;
    /**
     * Type of application
     * @type {string}
     * @memberof App
     */
    type: AppTypeEnum;
    /**
     * 
     * @type {Reference}
     * @memberof App
     */
    organization: Reference;
    /**
     * Whether the App is allowed to access information across all Tenants within its Organization
     * @type {boolean}
     * @memberof App
     */
    isTenantAgnostic?: boolean;
    /**
     * Whether the App is allowed to access information across all Organizations and Tenants
     * @type {boolean}
     * @memberof App
     */
    isOrgAgnostic?: boolean;
    /**
     * 
     * @type {Array<object>}
     * @memberof App
     */
    tenants?: Array<object>;
    /**
     * The clientId used for OAuth flows
     * @type {string}
     * @memberof App
     */
    readonly clientId?: string;
    /**
     * Defines the registered redirect URIs for the app - determines where tokens are sent after authentication
     * @type {Array<string>}
     * @memberof App
     */
    redirectUris?: Array<string>;
    /**
     * List of grants associated with the App
     * @type {Array<Reference>}
     * @memberof App
     */
    grants?: Array<Reference>;
    /**
     * Unique identifier for the Object
     * @type {string}
     * @memberof App
     */
    readonly id: string;
    /**
     * 
     * @type {InstanceMeta}
     * @memberof App
     */
    meta?: InstanceMeta;
    /**
     * Identifier of the Resource (if any) in other systems
     * @type {Array<Aspect>}
     * @memberof App
     */
    aspects?: Array<Aspect>;
    /**
     * User defined tags in the form of key:value pair
     * @type {Array<Tag>}
     * @memberof App
     */
    tags?: Array<Tag>;
}

/**
* @export
* @enum {string}
*/
export enum AppTypeEnum {
    Spa = 'spa',
    Web = 'web',
    Native = 'native'
}

export function AppFromJSON(json: any): App {
    return AppFromJSONTyped(json, false);
}

export function AppFromJSONTyped(json: any, ignoreDiscriminator: boolean): App {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'displayName': json['displayName'],
        'type': json['type'],
        'organization': ReferenceFromJSON(json['organization']),
        'isTenantAgnostic': !exists(json, 'isTenantAgnostic') ? undefined : json['isTenantAgnostic'],
        'isOrgAgnostic': !exists(json, 'isOrgAgnostic') ? undefined : json['isOrgAgnostic'],
        'tenants': !exists(json, 'tenants') ? undefined : json['tenants'],
        'clientId': !exists(json, 'clientId') ? undefined : json['clientId'],
        'redirectUris': !exists(json, 'redirectUris') ? undefined : json['redirectUris'],
        'grants': !exists(json, 'grants') ? undefined : ((json['grants'] as Array<any>).map(ReferenceFromJSON)),
        'id': json['id'],
        'meta': !exists(json, 'meta') ? undefined : InstanceMetaFromJSON(json['meta']),
        'aspects': !exists(json, 'aspects') ? undefined : ((json['aspects'] as Array<any>).map(AspectFromJSON)),
        'tags': !exists(json, 'tags') ? undefined : ((json['tags'] as Array<any>).map(TagFromJSON)),
    };
}

export function AppToJSON(value?: App | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'displayName': value.displayName,
        'type': value.type,
        'organization': ReferenceToJSON(value.organization),
        'isTenantAgnostic': value.isTenantAgnostic,
        'isOrgAgnostic': value.isOrgAgnostic,
        'tenants': value.tenants,
        'redirectUris': value.redirectUris,
        'grants': value.grants === undefined ? undefined : ((value.grants as Array<any>).map(ReferenceToJSON)),
        'meta': InstanceMetaToJSON(value.meta),
        'aspects': value.aspects === undefined ? undefined : ((value.aspects as Array<any>).map(AspectToJSON)),
        'tags': value.tags === undefined ? undefined : ((value.tags as Array<any>).map(TagToJSON)),
    };
}
