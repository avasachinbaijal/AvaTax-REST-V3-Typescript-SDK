/* tslint:disable */
/* eslint-disable */
/**
 * foundation
 * Platform foundation consists of services on top of which the Avalara Compliance Cloud platform is built. These services are foundational and provide functionality such as common organization, tenant and user management for the rest of the compliance platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import {
    Aspect,
    AspectFromJSON,
    AspectFromJSONTyped,
    AspectToJSON,
} from './Aspect';
import {
    Instance,
    InstanceFromJSON,
    InstanceFromJSONTyped,
    InstanceToJSON,
} from './Instance';
import {
    InstanceMeta,
    InstanceMetaFromJSON,
    InstanceMetaFromJSONTyped,
    InstanceMetaToJSON,
} from './InstanceMeta';
import {
    Reference,
    ReferenceFromJSON,
    ReferenceFromJSONTyped,
    ReferenceToJSON,
} from './Reference';
import {
    Tag,
    TagFromJSON,
    TagFromJSONTyped,
    TagToJSON,
} from './Tag';

/**
 * Representation of an Entitlement between an Tenant and a System
 * @export
 * @interface Entitlement
 */
export interface Entitlement {
    /**
     * Name of the entitlement, used for display purposes
     * @type {string}
     * @memberof Entitlement
     */
    displayName?: string;
    /**
     * 
     * @type {Reference}
     * @memberof Entitlement
     */
    system: Reference;
    /**
     * 
     * @type {Reference}
     * @memberof Entitlement
     */
    tenant: Reference;
    /**
     * Status of the entitlement - active or inactive
     * @type {boolean}
     * @memberof Entitlement
     */
    active?: boolean;
    /**
     * List of features associated with the entitlement
     * @type {Array<Reference>}
     * @memberof Entitlement
     */
    features?: Array<Reference>;
    /**
     * List of custom grants applicable for the entitlement
     * @type {Array<Reference>}
     * @memberof Entitlement
     */
    customGrants?: Array<Reference>;
    /**
     * Unique identifier for the Object
     * @type {string}
     * @memberof Entitlement
     */
    readonly id: string;
    /**
     * 
     * @type {InstanceMeta}
     * @memberof Entitlement
     */
    meta?: InstanceMeta;
    /**
     * Identifier of the Resource (if any) in other systems
     * @type {Array<Aspect>}
     * @memberof Entitlement
     */
    aspects?: Array<Aspect>;
    /**
     * User defined tags in the form of key:value pair
     * @type {Array<Tag>}
     * @memberof Entitlement
     */
    tags?: Array<Tag>;
}



export function EntitlementFromJSON(json: any): Entitlement {
    return EntitlementFromJSONTyped(json, false);
}

export function EntitlementFromJSONTyped(json: any, ignoreDiscriminator: boolean): Entitlement {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'system': ReferenceFromJSON(json['system']),
        'tenant': ReferenceFromJSON(json['tenant']),
        'active': !exists(json, 'active') ? undefined : json['active'],
        'features': !exists(json, 'features') ? undefined : ((json['features'] as Array<any>).map(ReferenceFromJSON)),
        'customGrants': !exists(json, 'customGrants') ? undefined : ((json['customGrants'] as Array<any>).map(ReferenceFromJSON)),
        'id': json['id'],
        'meta': !exists(json, 'meta') ? undefined : InstanceMetaFromJSON(json['meta']),
        'aspects': !exists(json, 'aspects') ? undefined : ((json['aspects'] as Array<any>).map(AspectFromJSON)),
        'tags': !exists(json, 'tags') ? undefined : ((json['tags'] as Array<any>).map(TagFromJSON)),
    };
}

export function EntitlementToJSON(value?: Entitlement | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'displayName': value.displayName,
        'system': ReferenceToJSON(value.system),
        'tenant': ReferenceToJSON(value.tenant),
        'active': value.active,
        'features': value.features === undefined ? undefined : ((value.features as Array<any>).map(ReferenceToJSON)),
        'customGrants': value.customGrants === undefined ? undefined : ((value.customGrants as Array<any>).map(ReferenceToJSON)),
        'meta': InstanceMetaToJSON(value.meta),
        'aspects': value.aspects === undefined ? undefined : ((value.aspects as Array<any>).map(AspectToJSON)),
        'tags': value.tags === undefined ? undefined : ((value.tags as Array<any>).map(TagToJSON)),
    };
}
