/* tslint:disable */
/* eslint-disable */
/**
 * foundation
 * Platform foundation consists of services on top of which the Avalara Compliance Cloud platform is built. These services are foundational and provide functionality such as common organization, tenant and user management for the rest of the compliance platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import {
    Aspect,
    AspectFromJSON,
    AspectFromJSONTyped,
    AspectToJSON,
} from './Aspect';
import {
    Instance,
    InstanceFromJSON,
    InstanceFromJSONTyped,
    InstanceToJSON,
} from './Instance';
import {
    InstanceMeta,
    InstanceMetaFromJSON,
    InstanceMetaFromJSONTyped,
    InstanceMetaToJSON,
} from './InstanceMeta';
import {
    Reference,
    ReferenceFromJSON,
    ReferenceFromJSONTyped,
    ReferenceToJSON,
} from './Reference';
import {
    Tag,
    TagFromJSON,
    TagFromJSONTyped,
    TagToJSON,
} from './Tag';

/**
 * Representation of a Role
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * Name of the Role
     * @type {string}
     * @memberof Role
     */
    displayName: string;
    /**
     * Description of the Role
     * @type {string}
     * @memberof Role
     */
    description?: string;
    /**
     * 
     * @type {Reference}
     * @memberof Role
     */
    system: Reference;
    /**
     * Determines the role ownership
     * @type {string}
     * @memberof Role
     */
    type: RoleTypeEnum;
    /**
     * List of associated permissions, identified by the permission name
     * @type {Array<string>}
     * @memberof Role
     */
    permissions: Array<string>;
    /**
     * Unique identifier for the Object
     * @type {string}
     * @memberof Role
     */
    readonly id: string;
    /**
     * 
     * @type {InstanceMeta}
     * @memberof Role
     */
    meta?: InstanceMeta;
    /**
     * Identifier of the Resource (if any) in other systems
     * @type {Array<Aspect>}
     * @memberof Role
     */
    aspects?: Array<Aspect>;
    /**
     * User defined tags in the form of key:value pair
     * @type {Array<Tag>}
     * @memberof Role
     */
    tags?: Array<Tag>;
}

/**
* @export
* @enum {string}
*/
export enum RoleTypeEnum {
    System = 'System',
    Custom = 'Custom'
}

export function RoleFromJSON(json: any): Role {
    return RoleFromJSONTyped(json, false);
}

export function RoleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Role {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'displayName': json['displayName'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'system': ReferenceFromJSON(json['system']),
        'type': json['type'],
        'permissions': json['permissions'],
        'id': json['id'],
        'meta': !exists(json, 'meta') ? undefined : InstanceMetaFromJSON(json['meta']),
        'aspects': !exists(json, 'aspects') ? undefined : ((json['aspects'] as Array<any>).map(AspectFromJSON)),
        'tags': !exists(json, 'tags') ? undefined : ((json['tags'] as Array<any>).map(TagFromJSON)),
    };
}

export function RoleToJSON(value?: Role | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'displayName': value.displayName,
        'description': value.description,
        'system': ReferenceToJSON(value.system),
        'type': value.type,
        'permissions': value.permissions,
        'meta': InstanceMetaToJSON(value.meta),
        'aspects': value.aspects === undefined ? undefined : ((value.aspects as Array<any>).map(AspectToJSON)),
        'tags': value.tags === undefined ? undefined : ((value.tags as Array<any>).map(TagToJSON)),
    };
}
