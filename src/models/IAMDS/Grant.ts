/* tslint:disable */
/* eslint-disable */
/**
 * foundation
 * Platform foundation consists of services on top of which the Avalara Compliance Cloud platform is built. These services are foundational and provide functionality such as common organization, tenant and user management for the rest of the compliance platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import {
    Aspect,
    AspectFromJSON,
    AspectFromJSONTyped,
    AspectToJSON,
} from './Aspect';
import {
    Instance,
    InstanceFromJSON,
    InstanceFromJSONTyped,
    InstanceToJSON,
} from './Instance';
import {
    InstanceMeta,
    InstanceMetaFromJSON,
    InstanceMetaFromJSONTyped,
    InstanceMetaToJSON,
} from './InstanceMeta';
import {
    Reference,
    ReferenceFromJSON,
    ReferenceFromJSONTyped,
    ReferenceToJSON,
} from './Reference';
import {
    Tag,
    TagFromJSON,
    TagFromJSONTyped,
    TagToJSON,
} from './Tag';

/**
 * Representation of a Grant
 * @export
 * @interface Grant
 */
export interface Grant {
    /**
     * Name of the Grant
     * @type {string}
     * @memberof Grant
     */
    displayName: string;
    /**
     * Description of the grant, used for display purposes
     * @type {string}
     * @memberof Grant
     */
    description?: string;
    /**
     * 
     * @type {Reference}
     * @memberof Grant
     */
    system: Reference;
    /**
     * Determines the grant ownership
     * @type {string}
     * @memberof Grant
     */
    type: GrantTypeEnum;
    /**
     * 
     * @type {Reference}
     * @memberof Grant
     */
    role: Reference;
    /**
     * Defines the conditions associated with permissions in the role
     * @type {Array<object>}
     * @memberof Grant
     */
    rules?: Array<object>;
    /**
     * Unique identifier for the Object
     * @type {string}
     * @memberof Grant
     */
    readonly id: string;
    /**
     * 
     * @type {InstanceMeta}
     * @memberof Grant
     */
    meta?: InstanceMeta;
    /**
     * Identifier of the Resource (if any) in other systems
     * @type {Array<Aspect>}
     * @memberof Grant
     */
    aspects?: Array<Aspect>;
    /**
     * User defined tags in the form of key:value pair
     * @type {Array<Tag>}
     * @memberof Grant
     */
    tags?: Array<Tag>;
}

/**
* @export
* @enum {string}
*/
export enum GrantTypeEnum {
    System = 'System',
    Custom = 'Custom'
}

export function GrantFromJSON(json: any): Grant {
    return GrantFromJSONTyped(json, false);
}

export function GrantFromJSONTyped(json: any, ignoreDiscriminator: boolean): Grant {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'displayName': json['displayName'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'system': ReferenceFromJSON(json['system']),
        'type': json['type'],
        'role': ReferenceFromJSON(json['role']),
        'rules': !exists(json, 'rules') ? undefined : json['rules'],
        'id': json['id'],
        'meta': !exists(json, 'meta') ? undefined : InstanceMetaFromJSON(json['meta']),
        'aspects': !exists(json, 'aspects') ? undefined : ((json['aspects'] as Array<any>).map(AspectFromJSON)),
        'tags': !exists(json, 'tags') ? undefined : ((json['tags'] as Array<any>).map(TagFromJSON)),
    };
}

export function GrantToJSON(value?: Grant | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'displayName': value.displayName,
        'description': value.description,
        'system': ReferenceToJSON(value.system),
        'type': value.type,
        'role': ReferenceToJSON(value.role),
        'rules': value.rules,
        'meta': InstanceMetaToJSON(value.meta),
        'aspects': value.aspects === undefined ? undefined : ((value.aspects as Array<any>).map(AspectToJSON)),
        'tags': value.tags === undefined ? undefined : ((value.tags as Array<any>).map(TagToJSON)),
    };
}
