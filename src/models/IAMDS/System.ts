/* tslint:disable */
/* eslint-disable */
/**
 * foundation
 * Platform foundation consists of services on top of which the Avalara Compliance Cloud platform is built. These services are foundational and provide functionality such as common organization, tenant and user management for the rest of the compliance platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import {
    Aspect,
    AspectFromJSON,
    AspectFromJSONTyped,
    AspectToJSON,
} from './Aspect';
import {
    Instance,
    InstanceFromJSON,
    InstanceFromJSONTyped,
    InstanceToJSON,
} from './Instance';
import {
    InstanceMeta,
    InstanceMetaFromJSON,
    InstanceMetaFromJSONTyped,
    InstanceMetaToJSON,
} from './InstanceMeta';
import {
    Tag,
    TagFromJSON,
    TagFromJSONTyped,
    TagToJSON,
} from './Tag';

/**
 * An IAM System
 * @export
 * @interface System
 */
export interface System {
    /**
     * Name of this System, used for display purposes
     * @type {string}
     * @memberof System
     */
    displayName?: string;
    /**
     * Summary information about this System, used for display purposes
     * @type {string}
     * @memberof System
     */
    description?: string;
    /**
     * Unique namespace in which this System organizes its Resources
     * @type {string}
     * @memberof System
     */
    namespace: string;
    /**
     * OAuth 2.0 Scopes that are owned by this System
     * @type {Array<object>}
     * @memberof System
     */
    scopes?: Array<object>;
    /**
     * Unique identifier for the Object
     * @type {string}
     * @memberof System
     */
    readonly id: string;
    /**
     * 
     * @type {InstanceMeta}
     * @memberof System
     */
    meta?: InstanceMeta;
    /**
     * Identifier of the Resource (if any) in other systems
     * @type {Array<Aspect>}
     * @memberof System
     */
    aspects?: Array<Aspect>;
    /**
     * User defined tags in the form of key:value pair
     * @type {Array<Tag>}
     * @memberof System
     */
    tags?: Array<Tag>;
}



export function SystemFromJSON(json: any): System {
    return SystemFromJSONTyped(json, false);
}

export function SystemFromJSONTyped(json: any, ignoreDiscriminator: boolean): System {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'namespace': json['namespace'],
        'scopes': !exists(json, 'scopes') ? undefined : json['scopes'],
        'id': json['id'],
        'meta': !exists(json, 'meta') ? undefined : InstanceMetaFromJSON(json['meta']),
        'aspects': !exists(json, 'aspects') ? undefined : ((json['aspects'] as Array<any>).map(AspectFromJSON)),
        'tags': !exists(json, 'tags') ? undefined : ((json['tags'] as Array<any>).map(TagFromJSON)),
    };
}

export function SystemToJSON(value?: System | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'displayName': value.displayName,
        'description': value.description,
        'namespace': value.namespace,
        'scopes': value.scopes,
        'meta': InstanceMetaToJSON(value.meta),
        'aspects': value.aspects === undefined ? undefined : ((value.aspects as Array<any>).map(AspectToJSON)),
        'tags': value.tags === undefined ? undefined : ((value.tags as Array<any>).map(TagToJSON)),
    };
}
