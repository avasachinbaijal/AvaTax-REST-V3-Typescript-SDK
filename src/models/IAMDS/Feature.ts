/* tslint:disable */
/* eslint-disable */
/**
 * foundation
 * Platform foundation consists of services on top of which the Avalara Compliance Cloud platform is built. These services are foundational and provide functionality such as common organization, tenant and user management for the rest of the compliance platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import {
    Aspect,
    AspectFromJSON,
    AspectFromJSONTyped,
    AspectToJSON,
} from './Aspect';
import {
    Instance,
    InstanceFromJSON,
    InstanceFromJSONTyped,
    InstanceToJSON,
} from './Instance';
import {
    InstanceMeta,
    InstanceMetaFromJSON,
    InstanceMetaFromJSONTyped,
    InstanceMetaToJSON,
} from './InstanceMeta';
import {
    Reference,
    ReferenceFromJSON,
    ReferenceFromJSONTyped,
    ReferenceToJSON,
} from './Reference';
import {
    Tag,
    TagFromJSON,
    TagFromJSONTyped,
    TagToJSON,
} from './Tag';

/**
 * Representation of a Feature provided by a System within the Avalara Compliance Cloud platform
 * @export
 * @interface Feature
 */
export interface Feature {
    /**
     * Name of the feature, used for display purposes
     * @type {string}
     * @memberof Feature
     */
    displayName: string;
    /**
     * Additional information about the feature, used for display purposes
     * @type {string}
     * @memberof Feature
     */
    description?: string;
    /**
     * 
     * @type {Reference}
     * @memberof Feature
     */
    system: Reference;
    /**
     * List of grants associated with the feature
     * @type {Array<Reference>}
     * @memberof Feature
     */
    grants?: Array<Reference>;
    /**
     * Unique identifier for the Object
     * @type {string}
     * @memberof Feature
     */
    readonly id: string;
    /**
     * 
     * @type {InstanceMeta}
     * @memberof Feature
     */
    meta?: InstanceMeta;
    /**
     * Identifier of the Resource (if any) in other systems
     * @type {Array<Aspect>}
     * @memberof Feature
     */
    aspects?: Array<Aspect>;
    /**
     * User defined tags in the form of key:value pair
     * @type {Array<Tag>}
     * @memberof Feature
     */
    tags?: Array<Tag>;
}



export function FeatureFromJSON(json: any): Feature {
    return FeatureFromJSONTyped(json, false);
}

export function FeatureFromJSONTyped(json: any, ignoreDiscriminator: boolean): Feature {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'displayName': json['displayName'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'system': ReferenceFromJSON(json['system']),
        'grants': !exists(json, 'grants') ? undefined : ((json['grants'] as Array<any>).map(ReferenceFromJSON)),
        'id': json['id'],
        'meta': !exists(json, 'meta') ? undefined : InstanceMetaFromJSON(json['meta']),
        'aspects': !exists(json, 'aspects') ? undefined : ((json['aspects'] as Array<any>).map(AspectFromJSON)),
        'tags': !exists(json, 'tags') ? undefined : ((json['tags'] as Array<any>).map(TagFromJSON)),
    };
}

export function FeatureToJSON(value?: Feature | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'displayName': value.displayName,
        'description': value.description,
        'system': ReferenceToJSON(value.system),
        'grants': value.grants === undefined ? undefined : ((value.grants as Array<any>).map(ReferenceToJSON)),
        'meta': InstanceMetaToJSON(value.meta),
        'aspects': value.aspects === undefined ? undefined : ((value.aspects as Array<any>).map(AspectToJSON)),
        'tags': value.tags === undefined ? undefined : ((value.tags as Array<any>).map(TagToJSON)),
    };
}
