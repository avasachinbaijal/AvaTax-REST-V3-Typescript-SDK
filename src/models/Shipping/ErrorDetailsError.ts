/* tslint:disable */
/* eslint-disable */
/**
 * Avalara Shipping Verification for Beverage Alcohol
 * API for evaluating transactions against direct-to-consumer Beverage Alcohol shipping regulations.  This API is currently in beta. 
 *
 * The version of the OpenAPI document: 2.1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import {
    ErrorDetailsErrorDetails,
    ErrorDetailsErrorDetailsFromJSON,
    ErrorDetailsErrorDetailsFromJSONTyped,
    ErrorDetailsErrorDetailsToJSON,
} from './ErrorDetailsErrorDetails';

/**
 * An object holding details about the error.
 * @export
 * @interface ErrorDetailsError
 */
export interface ErrorDetailsError {
    /**
     * Name of the error or message.
     * @type {string}
     * @memberof ErrorDetailsError
     */
    code?: ErrorDetailsErrorCodeEnum;
    /**
     * Concise summary of the message, suitable for display in the caption of an alert box.
     * @type {string}
     * @memberof ErrorDetailsError
     */
    message?: string;
    /**
     * 
     * @type {ErrorDetailsErrorDetails}
     * @memberof ErrorDetailsError
     */
    details?: ErrorDetailsErrorDetails;
}

/**
* @export
* @enum {string}
*/
export enum ErrorDetailsErrorCodeEnum {
    AuthenticationException = 'AuthenticationException',
    SubscriptionRequired = 'SubscriptionRequired',
    ServerConfiguration = 'ServerConfiguration',
    InvalidAddress = 'InvalidAddress',
    EntityNotFoundError = 'EntityNotFoundError'
}

export function ErrorDetailsErrorFromJSON(json: any): ErrorDetailsError {
    return ErrorDetailsErrorFromJSONTyped(json, false);
}

export function ErrorDetailsErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ErrorDetailsError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'details': !exists(json, 'details') ? undefined : ErrorDetailsErrorDetailsFromJSON(json['details']),
    };
}

export function ErrorDetailsErrorToJSON(value?: ErrorDetailsError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'message': value.message,
        'details': ErrorDetailsErrorDetailsToJSON(value.details),
    };
}
