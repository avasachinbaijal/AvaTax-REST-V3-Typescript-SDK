/* tslint:disable */
/* eslint-disable */
/**
 * Avalara Shipping Verification for Beverage Alcohol
 * API for evaluating transactions against direct-to-consumer Beverage Alcohol shipping regulations.  This API is currently in beta. 
 *
 * The version of the OpenAPI document: 2.1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import {
    ShippingVerifyResultLines,
    ShippingVerifyResultLinesFromJSON,
    ShippingVerifyResultLinesFromJSONTyped,
    ShippingVerifyResultLinesToJSON,
} from './ShippingVerifyResultLines';

/**
 * The Response of the /shippingverify endpoint. Describes the result of checking all applicable shipping rules against each line in the transaction.
 * @export
 * @interface ShippingVerifyResult
 */
export interface ShippingVerifyResult {
    /**
     * Whether every line in the transaction is compliant.
     * @type {boolean}
     * @memberof ShippingVerifyResult
     */
    compliant?: boolean;
    /**
     * A short description of the result of the compliance check.
     * @type {string}
     * @memberof ShippingVerifyResult
     */
    message?: string;
    /**
     * A detailed description of the result of each of the passed checks made against this transaction, separated by line.
     * @type {string}
     * @memberof ShippingVerifyResult
     */
    successMessages?: string;
    /**
     * A detailed description of the result of each of the failed checks made against this transaction, separated by line.
     * @type {string}
     * @memberof ShippingVerifyResult
     */
    failureMessages?: string;
    /**
     * An enumeration of all the failure codes received across all lines.
     * @type {Array<string>}
     * @memberof ShippingVerifyResult
     */
    failureCodes?: Array<ShippingVerifyResultFailureCodesEnum>;
    /**
     * An enumeration of all the warning codes received across all lines that a determination could not be made for.
     * @type {Array<string>}
     * @memberof ShippingVerifyResult
     */
    warningCodes?: Array<ShippingVerifyResultWarningCodesEnum>;
    /**
     * Describes the results of the checks made for each line in the transaction.
     * @type {Array<ShippingVerifyResultLines>}
     * @memberof ShippingVerifyResult
     */
    lines?: Array<ShippingVerifyResultLines>;
}

/**
* @export
* @enum {string}
*/
export enum ShippingVerifyResultFailureCodesEnum {
    BelowLegalDrinkingAge = 'BelowLegalDrinkingAge',
    ShippingProhibitedToAddress = 'ShippingProhibitedToAddress',
    MissingRequiredLicense = 'MissingRequiredLicense',
    VolumeLimitExceeded = 'VolumeLimitExceeded',
    InvalidFieldValue = 'InvalidFieldValue',
    MissingRequiredField = 'MissingRequiredField',
    InvalidFieldType = 'InvalidFieldType',
    InvalidFormat = 'InvalidFormat',
    InvalidDate = 'InvalidDate'
}/**
* @export
* @enum {string}
*/
export enum ShippingVerifyResultWarningCodesEnum {
    UnsupportedTaxCode = 'UnsupportedTaxCode',
    UnsupportedAddress = 'UnsupportedAddress'
}

export function ShippingVerifyResultFromJSON(json: any): ShippingVerifyResult {
    return ShippingVerifyResultFromJSONTyped(json, false);
}

export function ShippingVerifyResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): ShippingVerifyResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'compliant': !exists(json, 'compliant') ? undefined : json['compliant'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'successMessages': !exists(json, 'successMessages') ? undefined : json['successMessages'],
        'failureMessages': !exists(json, 'failureMessages') ? undefined : json['failureMessages'],
        'failureCodes': !exists(json, 'failureCodes') ? undefined : json['failureCodes'],
        'warningCodes': !exists(json, 'warningCodes') ? undefined : json['warningCodes'],
        'lines': !exists(json, 'lines') ? undefined : ((json['lines'] as Array<any>).map(ShippingVerifyResultLinesFromJSON)),
    };
}

export function ShippingVerifyResultToJSON(value?: ShippingVerifyResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'compliant': value.compliant,
        'message': value.message,
        'successMessages': value.successMessages,
        'failureMessages': value.failureMessages,
        'failureCodes': value.failureCodes,
        'warningCodes': value.warningCodes,
        'lines': value.lines === undefined ? undefined : ((value.lines as Array<any>).map(ShippingVerifyResultLinesToJSON)),
    };
}
